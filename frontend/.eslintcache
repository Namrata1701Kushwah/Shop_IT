[{"/home/ibm/shopit/frontend/src/index.js":"1","/home/ibm/shopit/frontend/src/App.js":"2","/home/ibm/shopit/frontend/src/components/layouts/Header.js":"3","/home/ibm/shopit/frontend/src/components/layouts/Footer.js":"4","/home/ibm/shopit/frontend/src/components/Home.js":"5","/home/ibm/shopit/frontend/src/components/layouts/MetaData.js":"6","/home/ibm/shopit/frontend/src/store.js":"7","/home/ibm/shopit/frontend/src/reducers/productReducers.js":"8","/home/ibm/shopit/frontend/src/constants/productConstants.js":"9","/home/ibm/shopit/frontend/src/actions/productActions.js":"10","/home/ibm/shopit/frontend/src/components/product/Product.js":"11","/home/ibm/shopit/frontend/src/components/product/productDetails.js":"12","/home/ibm/shopit/frontend/src/components/layouts/Loader.js":"13","/home/ibm/shopit/frontend/src/components/layouts/Search.js":"14","/home/ibm/shopit/frontend/src/reducers/userReducers.js":"15","/home/ibm/shopit/frontend/src/constants/userConstants.js":"16","/home/ibm/shopit/frontend/src/components/user/Login.js":"17","/home/ibm/shopit/frontend/src/actions/userActions.js":"18","/home/ibm/shopit/frontend/src/components/user/Register.js":"19","/home/ibm/shopit/frontend/src/components/user/Profile.js":"20","/home/ibm/shopit/frontend/src/components/route/ProtectedRoute.js":"21","/home/ibm/shopit/frontend/src/components/user/UpdateProfile.js":"22","/home/ibm/shopit/frontend/src/components/user/UpdatePassword.js":"23","/home/ibm/shopit/frontend/src/components/user/ForgotPassword.js":"24","/home/ibm/shopit/frontend/src/components/user/NewPassword.js":"25","/home/ibm/shopit/frontend/src/reducers/cartReducers.js":"26","/home/ibm/shopit/frontend/src/constants/cartConstant.js":"27","/home/ibm/shopit/frontend/src/actions/cartActions.js":"28","/home/ibm/shopit/frontend/src/components/cart/Cart.js":"29","/home/ibm/shopit/frontend/src/components/cart/Shipping.js":"30","/home/ibm/shopit/frontend/src/components/cart/checkoutSteps.js":"31","/home/ibm/shopit/frontend/src/components/cart/ConfirmOrder.js":"32","/home/ibm/shopit/frontend/src/components/cart/Payment.js":"33","/home/ibm/shopit/frontend/src/reducers/orderReducers.js":"34","/home/ibm/shopit/frontend/src/constants/orderConstant.js":"35","/home/ibm/shopit/frontend/src/actions/orderActions.js":"36","/home/ibm/shopit/frontend/src/components/cart/OrderSuccess.js":"37","/home/ibm/shopit/frontend/src/components/order/ListOrders.js":"38","/home/ibm/shopit/frontend/src/components/order/OrderDetails.js":"39","/home/ibm/shopit/frontend/src/components/review/ListReviews.js":"40","/home/ibm/shopit/frontend/src/components/admin/Dashboard.js":"41","/home/ibm/shopit/frontend/src/components/admin/Sidebar.js":"42","/home/ibm/shopit/frontend/src/components/admin/ProductList.js":"43","/home/ibm/shopit/frontend/src/components/admin/NewProduct.js":"44","/home/ibm/shopit/frontend/src/components/admin/UpdateProduct.js":"45","/home/ibm/shopit/frontend/src/components/admin/OrderList.js":"46","/home/ibm/shopit/frontend/src/components/admin/ProcessOrder.js":"47","/home/ibm/shopit/frontend/src/components/admin/UsersList.js":"48","/home/ibm/shopit/frontend/src/components/admin/UpdateUser.js":"49","/home/ibm/shopit/frontend/src/components/admin/ProductReviews.js":"50"},{"size":585,"mtime":1654067602189,"results":"51","hashOfConfig":"52"},{"size":4881,"mtime":1655799482888,"results":"53","hashOfConfig":"52"},{"size":3329,"mtime":1655809102483,"results":"54","hashOfConfig":"52"},{"size":289,"mtime":1655725560833,"results":"55","hashOfConfig":"52"},{"size":8734,"mtime":1655809376860,"results":"56","hashOfConfig":"52"},{"size":198,"mtime":1653635992825,"results":"57","hashOfConfig":"52"},{"size":1858,"mtime":1655718545860,"results":"58","hashOfConfig":"52"},{"size":7159,"mtime":1655789797689,"results":"59","hashOfConfig":"52"},{"size":2173,"mtime":1655718201064,"results":"60","hashOfConfig":"52"},{"size":6705,"mtime":1655720414024,"results":"61","hashOfConfig":"52"},{"size":1272,"mtime":1655810751328,"results":"62","hashOfConfig":"52"},{"size":11114,"mtime":1655811134321,"results":"63","hashOfConfig":"52"},{"size":134,"mtime":1654080588089,"results":"64","hashOfConfig":"52"},{"size":1108,"mtime":1654239326122,"results":"65","hashOfConfig":"52"},{"size":6435,"mtime":1655796161930,"results":"66","hashOfConfig":"52"},{"size":2232,"mtime":1655711229167,"results":"67","hashOfConfig":"52"},{"size":2693,"mtime":1655290035501,"results":"68","hashOfConfig":"52"},{"size":7619,"mtime":1655711685013,"results":"69","hashOfConfig":"52"},{"size":5749,"mtime":1654681941076,"results":"70","hashOfConfig":"52"},{"size":2085,"mtime":1654759307890,"results":"71","hashOfConfig":"52"},{"size":948,"mtime":1655805347065,"results":"72","hashOfConfig":"52"},{"size":5078,"mtime":1654772940912,"results":"73","hashOfConfig":"52"},{"size":2985,"mtime":1654778473509,"results":"74","hashOfConfig":"52"},{"size":4638,"mtime":1655799439856,"results":"75","hashOfConfig":"52"},{"size":2892,"mtime":1655798895034,"results":"76","hashOfConfig":"52"},{"size":1329,"mtime":1654863010813,"results":"77","hashOfConfig":"52"},{"size":148,"mtime":1654857052956,"results":"78","hashOfConfig":"52"},{"size":1223,"mtime":1654863055117,"results":"79","hashOfConfig":"52"},{"size":3957,"mtime":1654864176454,"results":"80","hashOfConfig":"52"},{"size":9780,"mtime":1655100756572,"results":"81","hashOfConfig":"52"},{"size":1736,"mtime":1654868079593,"results":"82","hashOfConfig":"52"},{"size":3797,"mtime":1655198225719,"results":"83","hashOfConfig":"52"},{"size":4931,"mtime":1655120521673,"results":"84","hashOfConfig":"52"},{"size":4398,"mtime":1655704287362,"results":"85","hashOfConfig":"52"},{"size":1168,"mtime":1655703933483,"results":"86","hashOfConfig":"52"},{"size":3861,"mtime":1655704577209,"results":"87","hashOfConfig":"52"},{"size":704,"mtime":1655121230195,"results":"88","hashOfConfig":"52"},{"size":2710,"mtime":1655187539322,"results":"89","hashOfConfig":"52"},{"size":7579,"mtime":1655202196021,"results":"90","hashOfConfig":"52"},{"size":718,"mtime":1655298201930,"results":"91","hashOfConfig":"52"},{"size":5400,"mtime":1656328094274,"results":"92","hashOfConfig":"52"},{"size":1665,"mtime":1655789569628,"results":"93","hashOfConfig":"52"},{"size":3979,"mtime":1655459984906,"results":"94","hashOfConfig":"52"},{"size":8256,"mtime":1655385107410,"results":"95","hashOfConfig":"52"},{"size":9340,"mtime":1655790056096,"results":"96","hashOfConfig":"52"},{"size":3835,"mtime":1655706027185,"results":"97","hashOfConfig":"52"},{"size":6278,"mtime":1655464423049,"results":"98","hashOfConfig":"52"},{"size":3540,"mtime":1655711886604,"results":"99","hashOfConfig":"52"},{"size":4591,"mtime":1655710828086,"results":"100","hashOfConfig":"52"},{"size":5073,"mtime":1655719393673,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iv7idi",{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},"/home/ibm/shopit/frontend/src/index.js",[],"/home/ibm/shopit/frontend/src/App.js",[],"/home/ibm/shopit/frontend/src/components/layouts/Header.js",["219"],"import '../../App.css'\nimport { Link, Route, Router } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useAlert } from \"react-alert\"\n\nimport { Fragment } from \"react\";\nimport Search from './Search';\n\nimport { logout } from '../../actions/userActions';\n\nconst Header = () => {\n    const alert = useAlert();\n    const dispatch = useDispatch()\n\n    const { user, loading } = useSelector(state => state.auth)\n    const {cartItems}= useSelector(state=>state.cart)\n\n    const logoutHandler =()=>{\n            dispatch(logout());\n            alert.success('Logged out successfully')\n    }\n\n    return (\n        <Fragment>\n            <nav className=\"navbar row\">\n                <div className=\"col-12 col-md-3\">\n                    <div className=\"navbar-brand\">\n                        <Link to=\"/\">\n                            <img src=\"/images/shopit_logo.png\" alt=\"icon\" />\n                        </Link>\n\n                    </div>\n                </div>\n\n                <div className=\"col-12 col-md-6 mt-2 mt-md-0\">\n                    <Route render={({ history }) => <Search history={history} />} />\n\n                </div>\n\n                <div className=\"col-12 col-md-3 mt-4 mt-md-0 text-center\">\n                    <Link to=\"/cart\" style={{ textDecoration: 'none' }}>\n                        <span id=\"cart\" className=\"ml-3\">Cart</span>\n                        <span className=\"ml-1\" id=\"cart_count\">{cartItems.length}</span>\n                    </Link>\n\n                    {user ? (\n                        <div className='ml-4 dropdown d-inline'>\n                            <Link to=\"#!\" className='btn dropdown-toggle text-white mr-4 mt-3'\n                                type=\"button\" id=\"dropDownMenuButton\" data-toggle='dropdown'\n                                area-aria-haspopup=\"true\" aria-expanded=\"false\">\n\n                                <figure className=\"avatar.avatar-nav\">\n                                    <img src={user.avatar && user.avatar.url} \n                                        alt={user && user.name}\n                                        className=\"rounded-circle\"\n                                    /><span  style ={{marginLeft:\"12px\"}}>{user && user.name}</span>\n                                </figure>\n\n                                \n                            </Link>\n\n                            <div className='dropdown-menu'  aria-labelledby='dropDownMenuButton'>\n                                {user && user.role === 'admin' && (\n                                    <Link  className='dropdown-item' to=\"/dashboard\">Dashboard</Link>\n                                ) }\n                                  <Link className='dropdown-item' to=\"/orders/me\">Orders</Link>\n                                 <Link className='dropdown-item' to=\"/me\">Profile</Link>\n                                <Link className='dropdown-item  text-danger' to=\"/\" onClick={logoutHandler}>\n                                    Logout\n                                </Link>\n\n                        </div>\n                        </div>\n\n                    ) : !loading && <Link to=\"/login\" className=\"btn ml-4\" id=\"login_btn\">Login</Link>\n                    }\n\n\n                </div>\n            </nav>\n       </Fragment>\n    )\n\n}\n\nexport default Header;","/home/ibm/shopit/frontend/src/components/layouts/Footer.js",[],"/home/ibm/shopit/frontend/src/components/Home.js",[],"/home/ibm/shopit/frontend/src/components/layouts/MetaData.js",[],"/home/ibm/shopit/frontend/src/store.js",["220"],"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {productsReducer,productDetailsReducer ,newReviewReducer,productReviewsReducer,newProductReducer,productReducer ,reviewReducer} from './reducers/productReducers'\nimport { authReducer, userReducers,forgotPasswordReducer,allUsersReducer , userDetailsReducer ,} from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport {newOrderReducer, myOrdersReducer, orderDetailsReducer,allOrdersReducer ,orderReducer} from './reducers/orderReducers'\nimport Shipping from './components/cart/Shipping';\n\nconst reducer = combineReducers({\n products : productsReducer,\n productDetails : productDetailsReducer,\n product : productReducer,\n\n auth : authReducer,\n user : userReducers,\n allUsers : allUsersReducer,\n userDetails : userDetailsReducer,\n forgotPassword : forgotPasswordReducer,\n cart : cartReducer,\n newOrder : newOrderReducer,\n myOrders : myOrdersReducer,\n orderDetails : orderDetailsReducer,\n newReview : newReviewReducer,\n productReviews : productReviewsReducer,\n review :reviewReducer,\n newProduct : newProductReducer,\n allOrders : allOrdersReducer,\n order : orderReducer\n\n})\n\n\nlet initialState = {\n    cart: {\n        cartItems: localStorage.getItem('cartItems')\n            ? JSON.parse(localStorage.getItem('cartItems'))\n            : [],\n        shippingInfo: localStorage.getItem('shippingInfo')\n            ? JSON.parse(localStorage.getItem('shippingInfo'))\n            : {}\n    }\n}\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store; \n\n\n// fragment\n// useEffect\n// thunk\n// export vs default export\n// package-lock.json // \n// formatting\n// git","/home/ibm/shopit/frontend/src/reducers/productReducers.js",[],"/home/ibm/shopit/frontend/src/constants/productConstants.js",[],"/home/ibm/shopit/frontend/src/actions/productActions.js",["221","222","223","224","225"],"import axios from 'axios';\nimport {\n    ALL_PRODUCTS_REQUEST,\n    ALL_PRODUCTS_SUCCESS,\n    ALL_PRODUCTS_FAIL,\n    ADMIN_PRODUCTS_REQUEST,\n    ADMIN_PRODUCTS_SUCCESS,\n    ADMIN_PRODUCTS_FAIL,\n    GET_REVIEWS_REQUEST,\n    GET_REVIEWS_SUCCESS,\n    GET_REVIEWS_FAIL,\n    DELETE_PRODUCT_REQUEST,\n    DELETE_PRODUCT_SUCCESS,\n    DELETE_PRODUCT_RESET,\n    DELETE_PRODUCT_FAIL,\n    UPDATE_PRODUCT_REQUEST,\n    UPDATE_PRODUCT_SUCCESS,\n    UPDATE_PRODUCT_FAIL,\n    UPDATE_PRODUCT_RESET,\n    \n\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_FAIL,\n    NEW_REVIEW_REQUEST,\n    NEW_REVIEW_SUCCESS,\n    NEW_REVIEW_RESET,\n    NEW_REVIEW_FAIL,\n    NEW_PRODUCT_REQUEST,\n    NEW_PRODUCT_SUCCESS,\n\n    NEW_PRODUCT_FAIL,\n    DELETE_REVIEW_REQUEST,\n    DELETE_REVIEW_SUCCESS,\n    DELETE_REVIEW_RESET,\n    DELETE_REVIEW_FAIL,\n    CLEAR_ERRORS\n} from '../constants/productConstants'\n\n\nexport const getProducts = (keyword = \"\", currentPage = 1, price, category, rating = 0) => async (dispatch) => {\n\n    try {\n        dispatch({ type: ALL_PRODUCTS_REQUEST })\n\n        // let link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[lte]=${price[1]}\n        // &price[gte]=${price[0]}`\n        let link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[lte]=${price\n        [1]}&price[gte]=${price[0]}&ratings[gte]=${rating}`\n\n        if (category) {\n            //   console.log(\"Actionnnnnnnnnnnnnnnnnnnnnnnnnn\",category)\n\n            link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[lte]=${price\n            [1]}&price[gte]=${price[0]}&category=${category}&ratings[gte]=${rating}`\n        }\n\n\n        const { data } = await axios.get(link)\n        // console.log(\"===============================================\",data);\n        dispatch({\n            type: ALL_PRODUCTS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_PRODUCTS_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\nexport const getProductDetails = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\n        const { data } = await axios.get(`/api/v1/product/${id}`)\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\n// Get product reviews\nexport const getProductReviews = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: GET_REVIEWS_REQUEST })\n        const { data } = await axios.get(`/api/v1/reviews?id=${id}`)\n      \n        dispatch({\n            type: GET_REVIEWS_SUCCESS,\n            payload: data.reviews\n        })\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type: GET_REVIEWS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\nexport const newReview = (reviewData) => async (dispatch) => {\n\n    try {\n        dispatch({ type: NEW_REVIEW_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': \"application/json\"\n            }\n        }\n        const { data } = await axios.put(`/api/v1/review`, reviewData, config)\n        console.log(\"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\", data);\n        dispatch({\n            type: NEW_REVIEW_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_REVIEW_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\n// Delete product (Admin)\nexport const deleteProduct = (id) => async (dispatch) => {\n\n    try {\n        dispatch({ type: UPDATE_PRODUCT_REQUEST })\n\n        \n        const { data } = await axios.delete(`/api/v1/admin/product/${id}`)\n        console.log(\"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\", data);\n        dispatch({\n            type: DELETE_PRODUCT_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_PRODUCT_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\n\nexport const newProduct = (productData) => async (dispatch) => {\n\n    try {\n        dispatch({ type: NEW_PRODUCT_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': \"application/json\"\n            }\n        }\n        const { data } = await axios.post(`/api/v1/admin/product/new`, productData, config)\n        console.log(\"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\", data);\n        dispatch({\n            type: NEW_PRODUCT_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_PRODUCT_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\n//UPdate product(Admin)\nexport const updateProduct = (id,productData) => async (dispatch) => {\n\n    try {\n        dispatch({ type: UPDATE_PRODUCT_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': \"application/json\"\n            }\n        }\n        const { data } = await axios.put(`/api/v1/admin/product/${id}`, productData, config)\n        console.log(\"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\", data);\n        dispatch({\n            type: UPDATE_PRODUCT_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PRODUCT_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\n\n\n\n\nexport const getAdminProducts = () => async (dispatch) => {\n    try {\n        dispatch({ type: ADMIN_PRODUCTS_REQUEST })\n        const { data } = await axios.get(`/api/v1/admin/products`)\n        console.log(\"HHHHHHHHHHHHHH\", data);\n        dispatch({\n            type: ADMIN_PRODUCTS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ADMIN_PRODUCTS_FAIL,\n            payload: error.response.data.message\n        })\n\n    }\n}\n\n\n// Delete product reviews\nexport const deleteReviews = (id,productId) => async (dispatch) => {\n    try {\n        dispatch({ type: DELETE_REVIEW_REQUEST })\n        const { data } = await axios.delete(`/api/v1/reviews?id=${id}&productId=${productId}`)\n     \n\n        // const { data } = await axios.delete(`/api/v1/admin/product/${id}`)\n      \n        dispatch({\n            type: DELETE_REVIEW_SUCCESS,\n            payload: data.success\n        })\n    } catch (error) {\n        \n        dispatch({\n            type: DELETE_REVIEW_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n//Clear Error\n\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n\n}","/home/ibm/shopit/frontend/src/components/product/Product.js",["226"],"import {Link} from 'react-router-dom'\n\n\nconst Product =({product, col})=>{\n    return (\n        <div className={`col-sm-12 col-md-6 col-lg-${col} my-3`}>\n            <div className=\"card p-3 rounded\">\n                <img\n                    className=\"card-img-top mx-auto\"\n                    src={product.images[0].url}\n                />\n                <div className=\"card-body d-flex flex-column\">\n                    <h5 className=\"card-title\">\n                        <Link to={`/product/${product._id}`}>{product.name}</Link>\n                    </h5>\n                    <div className=\"ratings mt-auto\">\n                        <div className=\"rating-outer\">\n                            {console.log(\"abc\",product?.ratings)}\n                            <div className=\"rating-inner\" style={{width:`${(product?.ratings / 5)*100}%`}}></div>\n                        </div>\n                        <span id=\"no_of_reviews\">({product.numOfReviews} Reviews)</span>\n                    </div>\n                    <p className=\"card-text\">${product.price}</p>\n                    <Link to={`/product/${product._id} `}id=\"view_btn\" className=\"btn btn-block\">View Details</Link>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\n\nexport default Product;","/home/ibm/shopit/frontend/src/components/product/productDetails.js",["227"],"import { Fragment, useEffect, useState } from \"react\";\nimport { Carousel } from 'react-bootstrap'\nimport Loader from \"../layouts/Loader\";\nimport MetaData from \"../layouts/MetaData\";\n\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getProductDetails, clearErrors, newReview } from \"../../actions/productActions\";\nimport { addItemToCart } from \"../../actions/cartActions\";\nimport { NEW_REVIEW_RESET } from '../../constants/productConstants'\nimport ListReviews from \"../review/ListReviews\";\n\n\nconst ProductDetails = ({ match }) => {\n\n    const [quantity, setQuantity] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch();\n    const alert = useAlert();\n\n    const { product, loading, error } = useSelector(state => state.productDetails)\n    // console.log(\"??????//\", product);\n\n\n    // console.log(\">>>>>>>>>>>>>>>>>>>>\", product);\n\n    const { error: reviewError, success } = useSelector(state => state.newReview)\n    const { user } = useSelector((state) => state.auth)\n    useEffect(() => {\n        dispatch(getProductDetails(match.params.id))\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n\n        if (reviewError) {\n            alert.error(reviewError);\n            dispatch(clearErrors())\n        }\n\n        if (success) {\n            alert.success('Review Posted successfully')\n            dispatch({ type: NEW_REVIEW_RESET })\n        }\n    }, [match.params.id, error, reviewError, alert, success, dispatch])\n\n\n    const addToCart = () => {\n        dispatch(addItemToCart(match.params.id, quantity));\n        alert.success('Item Added to Cart')\n    }\n\n\n    const increaseQty = () => {\n        const count = document.querySelector('.count')\n\n        if (count.valueAsNumber >= product.stock) return;\n\n        const qty = count.valueAsNumber + 1;\n        setQuantity(qty)\n    }\n\n    const decreaseQty = () => {\n\n        const count = document.querySelector('.count')\n\n        if (count.valueAsNumber <= 1) return;\n\n        const qty = count.valueAsNumber - 1;\n        setQuantity(qty)\n\n    }\n\n\n    const setUserRatings = () => {\n        const stars = document.querySelectorAll('.star')\n\n        stars.forEach((star, index) => {\n            star.starValue = index + 1;\n\n            ['click', 'mouseover', 'mouseout'].forEach(function (e) {\n                star.addEventListener(e, showRatings);\n            })\n        })\n\n\n        function showRatings(e) {\n            stars.forEach((star, index) => {\n                if (e.type === 'click') {\n                    if (index < this.starValue) {\n                        star.classList.add('orange');\n                        setRating(this.starValue)\n                    } else {\n                        star.classList.remove('orange');\n                    }\n\n\n                }\n                if (e.type === 'mouseover') {\n                    if (index < this.starValue) {\n                        star.classList.add('yellow');\n                    } else {\n                        star.classList.remove('yellow');\n                    }\n\n                }\n                if (e.type === 'mouseout') {\n                    star.classList.remove('yellow');\n                }\n            })\n        }\n    }\n\n    const reviewHandler = () => {\n\n        const formData = new FormData()\n\n        formData.set('rating', rating);\n        formData.set('comment', comment);\n        formData.set('productId', match.params.id);\n\n\n        dispatch(newReview(formData));\n        console.log(\"formData\", formData);\n        // alert.success(\"asdfhagsdfhg\")\n\n    }\n\n    return (\n\n\n\n        <Fragment>\n            {loading ? <Loader /> : (\n                <Fragment>\n                    <MetaData title={product?.name} />\n                    {/* {console.log(\"nameeeeeeeeeeeeeeeeee\",product?.product?.name)} */}\n                    <div className=\"row d-flex justify-content-around\">\n                        <div className=\"col-12 col-lg-5 img-fluid\" id=\"product_image\">\n                            {/* {console.log(<h1>product?.reviews[1]?.comment</h1>)} */}\n                            <Carousel pause='hover'>\n                                {product?.images?.map(image => (\n                                    <Carousel.Item key={image?.pubic_id}>\n                                        <img className=\"d-block w-100\" src={image.url} alt={product?.title} />\n                                    </Carousel.Item>\n                                ))}\n\n\n                            </Carousel>\n                        </div>\n\n                        <div className=\"col-12 col-lg-5 mt-5\">\n                            <h3>{product?.name}</h3>\n                            <p id=\"product_id\">Product # {product?._id}</p>\n\n                            <hr />\n\n                            {console.log(\"abcd\", product?.reviews)}\n\n                            <div className=\"rating-outer\">\n                                <div className=\"rating-inner\" style={{ width: `${(product?.ratings / 5) * 100}%` }}></div>\n                            </div>\n                            <span id=\"no_of_reviews\">({product?.numOfReviews} Reviews)</span>\n\n                            <hr />\n\n                            <p id=\"product_price\">${product?.price}</p>\n                            <div className=\"stockCounter d-inline\">\n                                <span className=\"btn btn-danger minus\" onClick={decreaseQty}>-</span>\n\n                                <input type=\"number\" className=\"form-control count d-inline\" value={quantity} readOnly />\n\n                                <span className=\"btn btn-primary plus\" onClick={increaseQty}>+</span>\n                            </div>\n                            <button type=\"button\" id=\"cart_btn\" className=\"btn btn-primary d-inline ml-4\" disabled={product?.stock === 0} onClick={addToCart}>Add to Cart</button>\n\n                            <hr />\n\n                            <p>Status: <span id=\"stock_status\" className={product?.stock > 0 ? 'greenColor' : 'redColor'} >{product?.stock > 0 ? 'In Stock' : 'Out of Stock'}</span></p>\n\n                            <hr />\n\n                            <h4 className=\"mt-2\">Description:</h4>\n                            <p>{product?.description}</p>\n                            <hr />\n                            <p id=\"product_seller mb-3\">Sold by: <strong>{product?.seller}</strong></p>\n\n\n                            {/* \n                            <h1>{product.product?.reviews[1]?.comment}</h1> */}\n\n                            {user ? <button id=\"review_btn\" type=\"button\" className=\"btn btn-primary mt-4\" data-toggle=\"modal\" data-target=\"#ratingModal\" onClick={setUserRatings}>\n                                Submit Your Review\n                            </button>\n                                :\n                                <div className=\"alert alert-danger mt-5\" type='alert'>Login to post your review.</div>\n                            }\n\n\n                            <div className=\"row mt-2 mb-5\">\n                                <div className=\"rating w-50\">\n\n                                    <div className=\"modal fade\" id=\"ratingModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"ratingModalLabel\" aria-hidden=\"true\">\n                                        <div className=\"modal-dialog\" role=\"document\">\n                                            <div className=\"modal-content\">\n                                                <div className=\"modal-header\">\n\n                                                    <h5 className=\"modal-title\" id=\"ratingModalLabel\">Submit Review</h5>\n                                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                                        <span aria-hidden=\"true\">&times;</span>\n                                                    </button>\n                                                </div>\n                                                <div className=\"modal-body\">\n\n                                                    <ul className=\"stars\" >\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                                    </ul>\n\n                                                    <textarea\n                                                        name=\"review\"\n                                                        id=\"review\" className=\"form-control mt-3\"\n                                                        value={comment}\n                                                        onChange={(e) => setComment(e.target.value)}\n                                                    >\n\n                                                    </textarea>\n\n                                                    <button className=\"btn my-3 float-right review-btn px-4 text-white\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={reviewHandler}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* {product?.reviews && product?.reviews?.length > 0 && (\n                      <ListReviews reviews = {product?.reviews} />\n                          \n                        \n                    )} */}\n\n                    {/* {product?.product?.reviews && product?.product?.reviews?.length  > 0 && (\n                      <ListReviews reviews = {product?.reviews} />\n                          \n                        \n                    )} */}\n\n                    {product?.reviews && product?.reviews?.length > 0 && (\n                        product?.reviews?.map(review => (\n                            <>\n                                <div className=\"rating-outer\">\n                                    <div className=\"rating-inner\" style={{ width: `${(review?.rating / 5) * 100}%` }}></div>\n                                </div>\n                                <p> {review?.name}</p>\n\n\n                                <p>{review?.comment}</p>\n                                <hr />\n\n                            </>\n\n                        ))\n                    )}\n\n                </Fragment>\n            )}\n        </Fragment>\n\n\n\n\n\n\n    )\n}\n\n\nexport default ProductDetails;\n\n\n\n","/home/ibm/shopit/frontend/src/components/layouts/Loader.js",[],"/home/ibm/shopit/frontend/src/components/layouts/Search.js",[],"/home/ibm/shopit/frontend/src/reducers/userReducers.js",[],"/home/ibm/shopit/frontend/src/constants/userConstants.js",[],"/home/ibm/shopit/frontend/src/components/user/Login.js",["228"],"import { Fragment, useEffect, useState } from \"react\";\nimport Loader from \"../layouts/Loader\";\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, clearErrors } from '../../actions/userActions';\nimport { Link } from 'react-router-dom';\n\n\n\nconst Login = ({ history, location }) => {\n\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const alert = useAlert();\n\n  const dispatch = useDispatch();\n\n  const { isAuthenticated, error, loading } = useSelector(state => state.auth)\n\n  const redirect = location.search ? location.search.split('=')[1] : '/'\n\n  console.log(\"redirect\", redirect);\n\n  useEffect(() => {\n\n    if (isAuthenticated) {\n      history.push(redirect)\n    }\n\n\n    if (error) {\n      alert.error(error)\n      dispatch(clearErrors());\n    }\n\n  }, [dispatch, isAuthenticated, loading, error, history])\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(login(email, password))\n  }\n\n\n  return (\n    <Fragment>\n      {loading ? <Loader /> : (\n        <Fragment>\n          <MetaData title={'Login'} />\n          <div className=\"row wrapper\">\n            <div className=\"col-10 col-lg-5\">\n              <form className=\"shadow-lg\" onSubmit={submitHandler}>\n                <h1 className=\"mb-3\">Login</h1>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email_field\">Email</label>\n                  <input\n                    type=\"email\"\n                    id=\"email_field\"\n                    className=\"form-control\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"password_field\">Password</label>\n                  <input\n                    type=\"password\"\n                    id=\"password_field\"\n                    className=\"form-control\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </div>\n\n                <Link to=\"/password/forgot\" className=\"float-right mb-4\">Forgot Password?</Link>\n\n                <button\n                  id=\"login_button\"\n                  type=\"submit\"\n                  className=\"btn btn-block py-3\"\n                >\n                  LOGIN\n                </button>\n\n                <Link to=\"/register\" className=\"float-right mt-3\">New User?</Link>\n              </form>\n            </div>\n          </div>\n\n        </Fragment>\n      )}\n    </Fragment>\n  )\n}\n\nexport default Login;","/home/ibm/shopit/frontend/src/actions/userActions.js",["229"],"import axios from 'axios'\n\n\n\nimport {\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_USER_REQUEST,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAIL,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAIL,\n    LOGOUT_SUCCESS,\n    LOGOUT_FAIL, \n    UPDATE_PROFILE_REQUEST,\n    UPDATE_PROFILE_SUCCESS,\n    // UPDATE_PROFILE_RESET,\n    UPDATE_PROFILE_FAIL,\n    UPDATE_PASSWORD_REQUEST,\n    UPDATE_PASSWORD_SUCCESS,\n    // UPDATE_PASSWORD_RESET,\n    UPDATE_PASSWORD_FAIL,\n    UPDATE_USER_REQUEST,\n    UPDATE_USER_SUCCESS,\n    // UPDATE_USER_RESET,\n    UPDATE_USER_FAIL,\n    FORGOT_PASSWORD_REQUEST,\n    FORGOT_PASSWORD_SUCCESS,\n    FORGOT_PASSWORD_FAIL,\n   NEW_PASSWORD_REQUEST,\n   NEW_PASSWORD_SUCCESS,\n    NEW_PASSWORD_FAIL,\n    ALL_USERS_REQUEST,\n    ALL_USERS_SUCCESS,\n    ALL_USERS_FAIL,\n    DELETE_USER_REQUEST,\n    DELETE_USER_SUCCESS,\n    DELETE_USER_RESET,\n    DELETE_USER_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    CLEAR_ERRORS\n} from '../constants/userConstants'\n\n//Login\n\nexport const login  = (email, password)=> async (dispatch)=>{\n    try {\n        dispatch({type : LOGIN_REQUEST})\n\n        const config = {\n            headers : {\n                'content-Type' : 'application/json'\n            }\n        }\n\n        const {data} = await axios.post('/api/v1/login', {email, password}, config)\n        console.log(data)\n\n        dispatch({\n            type : LOGIN_SUCCESS,\n            payload : data.user\n        })\n\n\n        \n    } catch (error) {\n        dispatch({\n            type : LOGIN_FAIL,\n            payload : error.response.data.message\n        })\n        \n    }\n\n}\n\n//Register User \n\nexport const register = (userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: REGISTER_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/register', userData, config)\n\n        dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: REGISTER_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n//Load User \nexport const loadUser = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: LOAD_USER_REQUEST })\n\n        const { data } = await axios.get('/api/v1/me')\n\n        dispatch({\n            type: LOAD_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOAD_USER_FAIL,\n            payload: error?.response?.data?.message\n        })\n    }\n}\n\n//Update Profile\n\nexport const updateProfile = (userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PROFILE_REQUEST})\n\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n\n        const { data } = await axios.put('/api/v1/me/update', userData, config)\n\n        dispatch({\n            type: UPDATE_PROFILE_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PROFILE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n//Update Password\n\nexport const updatePassword = (passwords) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PASSWORD_REQUEST})\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put('/api/v1/password/update', passwords, config)\n\n        dispatch({\n            type: UPDATE_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n  \n\n//forgot password\nexport const forgotPassword = (email) => async (dispatch) => {\n    try {\n\n        dispatch({ type: FORGOT_PASSWORD_REQUEST})\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/password/forgot', email, config)\n\n        dispatch({\n            type: FORGOT_PASSWORD_SUCCESS,\n            payload: data.message\n        })\n\n    } catch (error) {\n        dispatch({\n            type: FORGOT_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n\n//reset password\nexport const resetPassword = (token, passwords) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_PASSWORD_REQUEST})\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config)\n\n        dispatch({\n            type: NEW_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n\n//Logout User \n\nexport const logout = () => async (dispatch) => {\n    try {\n\n     \n\n        await axios.get('/api/v1/logout')\n\n        dispatch({\n            type: LOGOUT_SUCCESS,\n            \n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOGOUT_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n//Get All  User \nexport const allUsers = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_USERS_REQUEST })\n\n        const { data } = await axios.get('/api/v1/admin/users')\n\n        dispatch({\n            type: ALL_USERS_SUCCESS,\n            payload: data.users\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_USERS_FAIL,\n            payload: error?.response?.data?.message\n        })\n    }\n}\n\n//Update User - Admin\nexport const updateUser = (id, userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_USER_REQUEST})\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/admin/user/${id}`, userData, config)\n\n        dispatch({\n            type: UPDATE_USER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n//Get User Details - Admin\nexport const getUserDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: USER_DETAILS_REQUEST})\n\n        \n\n        const { data } = await axios.get(`/api/v1/admin/user/${id}`)\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n//Delete User - Admin\nexport const deleteUser = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_USER_REQUEST})\n\n        \n\n        const { data } = await axios.delete(`/api/v1/admin/user/${id}`)\n\n        dispatch({\n            type: DELETE_USER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n//Clear Error\n\nexport const clearErrors = ()=>async(dispatch)=>{\n    dispatch({\n        type:CLEAR_ERRORS\n    })\n    \n}\n\n\n","/home/ibm/shopit/frontend/src/components/user/Register.js",["230"],"import { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { register, clearErrors } from '../../actions/userActions';\n\n\n\n\n\n\n\nconst Register = ({ history }) => {\n\n    const [user, setUser] = useState({\n        name: '',\n        email: '',\n        password: ''\n    })\n\n    const { name, email, password } = user;\n\n    const [avatar, setAvatar] = useState('')\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n    const { isAuthenticated, error, loading } = useSelector(state => state.auth)\n\n    useEffect(() => {\n\n        if (isAuthenticated) {\n            history.push('/')\n        }\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n    }, [dispatch, isAuthenticated, loading, error, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('password', password);\n        formData.set('avatar', avatar);\n\n        dispatch(register(formData))\n     }\n\n     const onChange = e =>{\n         if(e.target.name === 'avatar'){\n\n            const reader = new FileReader();\n\n            reader.onload=()=>{\n                if(reader.readyState===2){\n                    setAvatarPreview(reader.result)\n                    setAvatar(reader.result)\n                }\n            }\n\n            reader.readAsDataURL(e.target.files[0])\n\n         } else{\n               setUser({...user, [e.target.name]: [e.target.value]})\n            }\n     }\n\n    return (\n        <Fragment>\n\n            <MetaData title={'Register User'} />\n\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\n                        <h1 className=\"mb-3\">Register</h1>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Name</label>\n                            <input \n                            type=\"name\" \n                            id=\"name_field\" \n                            className=\"form-control\"\n                            name = 'name'\n                            value={name}\n                            onChange = {onChange}  />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email_field\"\n                                className=\"form-control\"\n                                name = 'email'\n                                value={email}\n                                onChange = {onChange}\n\n                                // name='email'\n                                // value={email}\n                                // onChange={onChange}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password_field\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password_field\"\n                                className=\"form-control\"\n                               name='password'\n                                value={password}\n                                onChange={onChange}\n                            />\n                        </div>\n\n                        <div className='form-group'>\n                            <label htmlFor='avatar_upload'>Avatar</label>\n                            <div className='d-flex align-items-center'>\n                                <div>\n                                    <figure className='avatar mr-3 item-rtl'>\n                                        <img\n                                            src={avatarPreview }\n                                            className='rounded-circle'\n                                            alt='Avatar Preview'\n                                        />\n                                    </figure>\n                                </div>\n                                <div className='custom-file'>\n                                    <input\n                                        type='file'\n                                        name='avatar'\n                                        className='custom-file-input'\n                                        id='customFile'\n                                        accept=\"images/*\"\n                                        onChange={onChange}\n                                    />\n                                    <label className='custom-file-label' htmlFor='customFile'>\n                                        Choose Avatar\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <button\n                            id=\"register_button\"\n                            type=\"submit\"\n                            className=\"btn btn-block py-3\"\n                            disabled={loading ? true : false}\n                        >\n                            REGISTER\n                        </button>\n                    </form>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default Register;","/home/ibm/shopit/frontend/src/components/user/Profile.js",[],"/home/ibm/shopit/frontend/src/components/route/ProtectedRoute.js",["231"],"import { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { Fragment } from 'react';\n\n\n\nconst ProtectedRoute = ({isAdmin, component: Component, ...rest }) => {\n    const { isAuthenticated, loading, user } = useSelector(state => state.auth)\n    console.log(\"data auth\",loading, user?.role);\n    return (\n        <Fragment>\n        {loading === false && (\n            <Route\n                {...rest}\n                render={props => {\n                    if (isAuthenticated === false) {\n                        return <Redirect to='/login' />\n                    }\n                  \n                    if(isAdmin == true && user.role !== 'admin'){\n                        return <Redirect to =\"/\" />\n                    }\n                   \n\n                    return <Component {...props} />\n                }}\n            />\n        )}\n    </Fragment>\n\n  \n\n\n    )\n}\n\n\nexport default ProtectedRoute;","/home/ibm/shopit/frontend/src/components/user/UpdateProfile.js",["232"],"import { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateProfile, loadUser, clearErrors } from '../../actions/userActions';\nimport { UPDATE_PROFILE_RESET } from \"../../constants/userConstants\";\n\n\nconst UpdateProfile = ({ history }) => {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [avatar, setAvatar] = useState('')\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n    const { user } = useSelector(state => state.auth)\n    const { error, isUpdated, loading } = useSelector(state => state.user)\n\n    useEffect(() => {\n\n        if (user) {\n            setName(user.name);\n            setEmail(user.email);\n            setAvatarPreview(user.avatar.url)\n        }\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n        if (isUpdated) {\n            alert.success('user updated sucessfully')\n            dispatch(loadUser());\n\n            history.push('/me')\n\n            dispatch({\n                type: UPDATE_PROFILE_RESET\n            })\n        }\n\n    }, [dispatch, loading, error, history, isUpdated])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('avatar', avatar);\n\n        dispatch(updateProfile(formData))\n    }\n\n    const onChange = e => {\n\n\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            if (reader.readyState === 2) {\n                setAvatarPreview(reader.result)\n                setAvatar(reader.result)\n            }\n        }\n\n        reader.readAsDataURL(e.target.files[0])\n\n\n    }\n    return (\n        <Fragment>\n            <MetaData title={'update profile'} />\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\n                        <h1 className=\"mt-2 mb-5\">Update Profile</h1>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Name</label>\n                            <input \n\t\t\t\t\t\t\t\ttype=\"name\" \n\t\t\t\t\t\t\t\tid=\"name_field\" \n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n                                name='name'\n                                value={name}\n                                onChange={(e)=>setName(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email_field\"\n                                className=\"form-control\"\n                                name='email'\n                                value={email}\n                                onChange={(e)=>setEmail(e.target.value)}\n                            />\n                        </div>\n\n                        <div className='form-group'>\n                            <label htmlFor='avatar_upload'>Avatar</label>\n                            <div className='d-flex align-items-center'>\n                                <div>\n                                    <figure className='avatar mr-3 item-rtl'>\n                                        <img\n                                            src={avatarPreview}\n                                            className='rounded-circle'\n                                            alt='Avatar Preview'\n                                        />\n                                    </figure>\n                                </div>\n                                <div className='custom-file'>\n                                    <input\n                                        type='file'\n                                        name='avatar'\n                                        className='custom-file-input'\n                                        id='customFile'\n                                        accept=\"image/*\"\n                                        onChange={onChange}\n                                    />\n                                    <label className='custom-file-label' htmlFor='customFile'>\n                                        Choose Avatar\n                                </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\"\n                          disabled={loading ? true : false} >Update</button>\n                    </form>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default UpdateProfile;","/home/ibm/shopit/frontend/src/components/user/UpdatePassword.js",["233"],"import { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updatePassword, clearErrors } from '../../actions/userActions';\nimport { UPDATE_PASSWORD_RESET } from \"../../constants/userConstants\";\n\n\n\n\n\n\nconst UpdatePassword = ({history}) =>{\n\n    const [oldPassword, setOldPassword] = useState('')\n    \n    const [password, setPassword] = useState('')\n\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n \n    const { error, isUpdated, loading } = useSelector(state => state.user)\n\n    useEffect(() => {\n\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n        if (isUpdated) {\n            alert.success('Password updated sucessfully')\n           \n\n            history.push('/me')\n\n            dispatch({\n                type: UPDATE_PASSWORD_RESET\n            })\n        }\n\n    }, [dispatch, loading, error, history, isUpdated])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('oldPassword', oldPassword);\n        formData.set('password', password);\n      \n\n        dispatch(updatePassword(formData))\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Change Password'}/>\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler}>\n                        <h1 className=\"mt-2 mb-5\">Update Password</h1>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"old_password_field\">Old Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"old_password_field\"\n                                className=\"form-control\"\n                                value={oldPassword}\n                                onChange={(e)=>setOldPassword(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"new_password_field\">New Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"new_password_field\"\n                                className=\"form-control\"\n                                value={password}\n                                onChange={(e)=>setPassword(e.target.value)}\n                            />\n                        </div>\n\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\"\n                            disabled={loading ? true : false} >Update Password</button>\n                    </form>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default UpdatePassword;","/home/ibm/shopit/frontend/src/components/user/ForgotPassword.js",[],"/home/ibm/shopit/frontend/src/components/user/NewPassword.js",[],"/home/ibm/shopit/frontend/src/reducers/cartReducers.js",[],"/home/ibm/shopit/frontend/src/constants/cartConstant.js",[],"/home/ibm/shopit/frontend/src/actions/cartActions.js",[],"/home/ibm/shopit/frontend/src/components/cart/Cart.js",["234"],"import { Fragment } from 'react';\nimport {Link} from 'react-router-dom'\n\nimport MetaData from \"../layouts/MetaData\";\n\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addItemToCart,removeItemFromCart } from \"../../actions/cartActions\";\n\n\n\n\nconst Cart  = ({history})=>{\n    const dispatch = useDispatch();\n    const {cartItems} = useSelector(state=>state.cart)\n    // console.log(cartItems)\n \n    // console.log(cartItems.length)\n\n    const removeItemCartHandler = (id)=>{\n             dispatch(removeItemFromCart(id))\n    }\n\n    const increaseQty = (id, quantity, stock) => {\n      const newQty = quantity + 1;\n\n        if (newQty > stock) return;\n\n       dispatch(addItemToCart(id, newQty))\n    }\n\n    const decreaseQty = (id, quantity) => {\n\n        const newQty = quantity -1;\n\n        if (newQty <= 0) return;\n\n       dispatch(addItemToCart(id, newQty)) \n\n    }\n\n    const checkoutHandler = () => {\n        history.push('/login?redirect=ship')\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Your Cart'}/>\n            {cartItems.length ===0 ?  <h2 className='mt-5'>YOur Cart is Empty</h2> : (\n                <Fragment>\n                       <h2 className=\"mt-5\">Your Cart: <b>{cartItems.length}items</b></h2>\n        \n        <div className=\"row d-flex justify-content-between\">\n            <div className=\"col-12 col-lg-8\">\n                {cartItems.map(item=>(\n                      <Fragment>\n                          <hr/>\n\n                          <div className=\"cart-item\" key={item.product}>\n                    <div className=\"row\">\n                        <div className=\"col-4 col-lg-3\">\n                            <img src={item.image} alt=\"Laptop\" height=\"90\" width=\"115\"/>\n                        </div>\n\n                        <div className=\"col-5 col-lg-3\">\n                            <Link to={`/ products/${item.product}`}>{item.name}</Link>\n                        </div>\n\n\n                        <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\n                            <p id=\"card_item_price\">{item.price}</p>\n                        </div>\n\n                        <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\n                            <div className=\"stockCounter d-inline\">\n                                <span className=\"btn btn-danger minus\" onClick={()=>decreaseQty(item.product, item.quantity)}>-</span>\n                                <input type=\"number\" className=\"form-control count d-inline\" value={item.quantity} readOnly />\n\n\t\t\t\t\t\t\t\t<span className=\"btn btn-primary plus\" onClick={()=>increaseQty(item.product, item.quantity,item.stock)}>+</span>\n                            </div>\n                        </div>\n\n                        <div className=\"col-4 col-lg-1 mt-4 mt-lg-0\">\n                            <i id=\"delete_cart_item\" className=\"fa fa-trash btn btn-danger\" onClick={()=>removeItemCartHandler(item.product)}></i>\n                        </div>\n\n                    </div>\n                </div>\n                <hr />\n                      </Fragment>\n                ))}\n               \n            </div>\n\n            <div className=\"col-12 col-lg-3 my-4\">\n                <div id=\"order_summary\">\n                    <h4>Order Summary</h4>\n                    <hr />\n                    <p>Subtotal:  <span className=\"order-summary-values\">{cartItems.reduce((acc,item)=>(acc + Number(item.quantity)),0)} (Units)</span></p>\n                    <p>Est. total: <span className=\"order-summary-values\">${cartItems.reduce((acc,item)=>(acc + item.quantity * item.price),0).toFixed(2)}</span></p>\n    \n                    <hr />\n                    <button id=\"checkout_btn\" className=\"btn btn-primary btn-block\" onClick={checkoutHandler}>Check out</button>\n                </div>\n            </div>\n        </div>\n                    </Fragment>\n            )}\n\n        </Fragment>\n    )\n}\n\n\nexport default Cart;","/home/ibm/shopit/frontend/src/components/cart/Shipping.js",[],"/home/ibm/shopit/frontend/src/components/cart/checkoutSteps.js",["235"],"import { Fragment } from \"react\";\nimport {Link}  from 'react-router-dom'\n\nconst CheckoutSteps =({shipping, confirmOrder, payment}) =>{\n    return (\n        <div className=\"checkout-progress d-flex justify-content-center mt-5\">\n\n        {shipping ? <Link to='shippping' className=\"float-right\">\n            <div className=\"triangle2-active\"></div>\n            <div className=\"step active-step\">Shipping</div>\n            <div className=\"triangle-active\"></div>\n        </Link> : <Link to=\"#!\" disabled>\n                <div className=\"triangle2-incomplete\"></div>\n                <div className=\"step incomplete\">Shipping</div>\n                <div className=\"triangle-incomplete\"></div>\n            </Link>}\n\n        {confirmOrder ? <Link to='/order/confirm' className=\"float-right\">\n            <div className=\"triangle2-active\"></div>\n            <div className=\"step active-step\">Confirm Order</div>\n            <div className=\"triangle-active\"></div>\n        </Link> : <Link to=\"#!\" disabled>\n                <div className=\"triangle2-incomplete\"></div>\n                <div className=\"step incomplete\">Confirm Order</div>\n                <div className=\"triangle-incomplete\"></div>\n            </Link>}\n\n        {payment ? <Link to='/payment' className=\"float-right\">\n            <div className=\"triangle2-active\"></div>\n            <div className=\"step active-step\">Payment</div>\n            <div className=\"triangle-active\"></div>\n        </Link> : <Link to=\"#!\" disabled>\n                <div className=\"triangle2-incomplete\"></div>\n                <div className=\"step incomplete\">Payment</div>\n                <div className=\"triangle-incomplete\"></div>\n            </Link>}\n\n    </div>\n    )\n}\n\n\nexport default CheckoutSteps;","/home/ibm/shopit/frontend/src/components/cart/ConfirmOrder.js",[],"/home/ibm/shopit/frontend/src/components/cart/Payment.js",[],"/home/ibm/shopit/frontend/src/reducers/orderReducers.js",[],"/home/ibm/shopit/frontend/src/constants/orderConstant.js",[],"/home/ibm/shopit/frontend/src/actions/orderActions.js",["236","237"],"import axios from 'axios'\nimport {\n    CREATE_ORDER_REQUEST,\n    CREATE_ORDER_SUCCESS,\n    CREATE_ORDER_FAIL,\n    MY_ORDERS_REQUEST,\n    MY_ORDERS_SUCCESS,\n    MY_ORDERS_FAIL,\n    ALL_ORDERS_REQUEST,\n    ALL_ORDERS_SUCCESS,\n    ALL_ORDERS_FAIL,\n    UPDATE_ORDER_REQUEST,\n    UPDATE_ORDER_SUCCESS,\n    // UPDATE_ORDER_RESET,\n    UPDATE_ORDER_FAIL,  \n    DELETE_ORDER_REQUEST,\n    DELETE_ORDER_SUCCESS,\n    // DELETE_ORDER_RESET,\n    DELETE_ORDER_FAIL,\n    ORDERS_DETAILS_REQUEST,\n    ORDERS_DETAILS_SUCCESS,\n    ORDERS_DETAILS_FAIL,\n    CLEAR_ERRORS\n} from '../constants/orderConstant'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: CREATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/order/new', order, config)\n\n        dispatch({\n            type: CREATE_ORDER_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: CREATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n\n\n    }\n}\n\n\n//Get Currently logged in user orders\nexport const myOrders = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: MY_ORDERS_REQUEST });\n\n        const { data } = await axios.get('/api/v1/orders/me')\n        console.log(data,\"???????????\");\n\n        dispatch({\n            type: MY_ORDERS_SUCCESS,\n            payload: data.orders\n        })\n\n    } catch (error) {\n        dispatch({\n            type: MY_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n//Get order details\nexport const getOrderDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: ORDERS_DETAILS_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/order/${id}`)\n        console.log(data,\"???????????\");\n\n        dispatch({\n            type: ORDERS_DETAILS_SUCCESS,\n            payload: data.order\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ORDERS_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n//Get all orders - ADMIN\nexport const allOrders = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_ORDERS_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/admin/orders`)\n        console.log(data,\"???????????\");\n\n        dispatch({\n            type: ALL_ORDERS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n \n//update order\nexport const updateOrder = (id,orderData) => async (dispatch) => {\n    try {\n        dispatch({ type: UPDATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/admin/order/${id}`, orderData, config)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n\n\n    }\n}\n\n//deleted order\nexport const deleteOrder = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: DELETE_ORDER_REQUEST })\n\n        \n\n        const { data } = await axios.delete(`/api/v1/admin/order/${id}`)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n\n\n    }\n}\n\n\n\n//Clear Error\n\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n\n}","/home/ibm/shopit/frontend/src/components/cart/OrderSuccess.js",[],"/home/ibm/shopit/frontend/src/components/order/ListOrders.js",[],"/home/ibm/shopit/frontend/src/components/order/OrderDetails.js",[],"/home/ibm/shopit/frontend/src/components/review/ListReviews.js",[],"/home/ibm/shopit/frontend/src/components/admin/Dashboard.js",[],"/home/ibm/shopit/frontend/src/components/admin/Sidebar.js",[],"/home/ibm/shopit/frontend/src/components/admin/ProductList.js",["238"],"import React, { Fragment, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { MDBDataTable } from 'mdbreact'\nimport MetaData from '../layouts/MetaData'\nimport Loader from '../layouts/Loader'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAdminProducts, clearErrors, deleteProduct } from '../../actions/productActions'\nimport { DELETE_PRODUCT_RESET } from '../../constants/productConstants'\nimport Sidebar from './Sidebar'\n\n\n\n\n\nconst ProductList = ({ history }) => {\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, products } = useSelector(state => state?.products);\n    const {error:deleteErrror, isDeleted} = useSelector(state=>state.product)\n\n    useEffect(() => {\n        dispatch(getAdminProducts());\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n\n        if (deleteErrror) {\n            alert.deleteErrror(error);\n            dispatch(clearErrors())\n        }\n        if(isDeleted){\n            alert.success(\"Product Deleted Successfully\")\n            history.push(\"/admin/products\")\n            dispatch({type : 'DELETE_PRODUCT_RESET '})\n        }\n\n    }, [dispatch, alert, error ,deleteErrror, isDeleted, history])\n\n    const setProducts = () => {\n        const data = {\n            columns: [\n                {\n                    label: 'ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Name',\n                    field: 'name',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Prpce',\n                    field: 'price',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Stock',\n                    field: 'stock',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n\n                },\n            ],\n            rows: []\n        }\n// console.log(\"pro\",products.products);\n        products?.products?.forEach(product => {\n            data?.rows?.push({\n                id: product?._id,\n                name: product?.name,\n                price: `$${product?.price}`,\n                stock: product?.stock,\n                actions:\n                    <Fragment>\n                        <Link to={`/admin/product/${product?._id}`} className=\"btn btn-primary py-1 px-2\">\n                            <i className='fa fa-pencil'></i>\n                        </Link>\n\n                        <button style={{marginLeft: \"45px\", marginTop: \"-60px\"}} className='btn btn-danger py-1 px-6 ml-7' onClick={()=>deleteProductHandler(product._id)} >\n                            <i className='fa fa-trash'></i>\n                        </button>\n                    </Fragment>\n\n            })\n        })\n\n        return data;\n    }\n\n\n    const deleteProductHandler = (id)=>{\n        dispatch(deleteProduct(id))\n    }\n// console.log(\"KKKKKKKK\",products);\n    return (\n        <Fragment>\n            <MetaData title={'All Product'} />\n            <div className='row'>\n                <div className='col-12 col-md-2'>\n                    <Sidebar />\n\n                </div>\n                <div className='col-12 col-md-10'>\n                    <Fragment>\n                        <h1 className='my-5'>All Products</h1>\n                        {loading ? <Loader /> : (\n                            <MDBDataTable\n                                data={setProducts()}\n                                className=\"px-3\"\n                                bordered\n                                striped\n                                hover\n                            />\n                        )}\n                    </Fragment>\n\n                </div>\n\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default ProductList;","/home/ibm/shopit/frontend/src/components/admin/NewProduct.js",["239"],"import React, { Fragment, useState ,useEffect} from 'react'\n\nimport MetaData from '../layouts/MetaData'\nimport Loader from '../layouts/Loader'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { newProduct, clearErrors } from '../../actions/productActions'\nimport Sidebar from './Sidebar'\nimport { NEW_PRODUCT_RESET } from '../../constants/productConstants'\n\n\n\n\n\nconst NewProduct = ({ history }) => {\n    const [name, setName] = useState(\"\")\n    const [price, setPrice] = useState('')\n    const [description, setDescription] = useState('')\n    const [category, setCategory] = useState('')\n    const [stock, setStock] = useState(0);\n    const [seller, setSeller] = useState('')\n    const [images, setImages] = useState([])\n    const [imagesPreview, setImagesPreview] = useState([])\n\n\n    const categories = [\n        \"Electronics\",\n        \"Cameras\",\n        \"Laptops\",\n        \"Accessories\",\n        \"Headphones\",\n        \"Food\",\n        \"Books\",\n        \"Clothes/Shoes\",\n        \"Beauty/Health\",\n        \"Sports\",\n        \"Outdoor\",\n        \"Home\",\n    ]\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, success } = useSelector(state => state?.newProduct);\n\n    useEffect(() => {\n\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n\n        if (success) {\n            history.push('/admin/products')\n            alert.success(\"Product created successfully\")\n            dispatch({ type: NEW_PRODUCT_RESET })\n        }\n    }, [dispatch, alert, error, success, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('price', price);\n        formData.set('description', description);\n        formData.set('category', category);\n        formData.set('stock', stock);\n        formData.set('seller', seller);\n\n\n        images.forEach(image => {\n            formData.append('images', image)\n        })\n\n        dispatch(newProduct(formData))\n    }\n\n    const onChange = e => {\n        const files = Array.from(e.target.files)\n        setImagesPreview([]);\n        setImages([])\n\n        files.forEach(file => {\n            const reader = new FileReader();\n\n            reader.onload = () => {\n                if (reader.readyState === 2) {\n                    setImagesPreview(oldArray => [...oldArray, reader.result])\n                    setImages(oldArray => [...oldArray, reader.result])\n\n                }\n            }\n\n            reader.readAsDataURL(file)\n        })\n\n\n\n\n\n\n    }\n\n\n\n\n\n\n\n\n    return (\n      \n        <Fragment>\n            <MetaData title={'New Product'} />\n            <div className=\"row\">\n                <div className=\"col-12 col-md-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                        <div className=\"wrapper my-5\">\n                            <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\n                                <h1 className=\"mb-4\">New Product</h1>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name_field\">Name</label>\n                                    <input\n                                        type=\"text\"\n                                        id=\"name_field\"\n                                        className=\"form-control\"\n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"price_field\">Price</label>\n                                    <input\n                                        type=\"text\"\n                                        id=\"price_field\"\n                                        className=\"form-control\"\n                                        value={price}\n                                        onChange={(e) => setPrice(e.target.value)}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"description_field\">Description</label>\n                                    <textarea className=\"form-control\" id=\"description_field\" rows=\"8\" value={description} onChange={(e) => setDescription(e.target.value)}></textarea>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"category_field\">Category</label>\n                                    <select className=\"form-control\" id=\"category_field\" value={category} onChange={(e) => setCategory(e.target.value)}>\n                                        {categories.map(category => (\n                                            <option key={category} value={category} >{category}</option>\n                                        ))}\n\n                                    </select>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"stock_field\">Stock</label>\n                                    <input\n                                        type=\"number\"\n                                        id=\"stock_field\"\n                                        className=\"form-control\"\n                                        value={stock}\n                                        onChange={(e) => setStock(e.target.value)}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"seller_field\">Seller Name</label>\n                                    <input\n                                        type=\"text\"\n                                        id=\"seller_field\"\n                                        className=\"form-control\"\n                                        value={seller}\n                                        onChange={(e) => setSeller(e.target.value)}\n                                    />\n                                </div>\n\n                                <div className='form-group'>\n                                    <label>Images</label>\n\n                                    <div className='custom-file'>\n                                        <input\n                                            type='file'\n                                            name='product_images'\n                                            className='custom-file-input'\n                                            id='customFile'\n                                            onChange={onChange}\n                                            multiple\n                                        />\n                                        <label className='custom-file-label' htmlFor='customFile'>\n                                            Choose Images\n                                     </label>\n                                    </div>\n\n                                    {imagesPreview.map(img => (\n                                        <img src={img} key={img} alt=\"Images Preview\" className=\"mt-3 mr-2\" width=\"55\" height=\"52\" />\n                                    ))}\n\n                                </div>\n\n\n                                <button\n                                    id=\"login_button\"\n                                    type=\"submit\"\n                                    className=\"btn btn-block py-3\"\n                                    disabled={loading ? true : false}\n                                >\n                                    CREATE\n                                </button>\n\n                            </form>\n                        </div>\n                    </Fragment>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\nexport default NewProduct;\n\n","/home/ibm/shopit/frontend/src/components/admin/UpdateProduct.js",[],"/home/ibm/shopit/frontend/src/components/admin/OrderList.js",[],"/home/ibm/shopit/frontend/src/components/admin/ProcessOrder.js",[],"/home/ibm/shopit/frontend/src/components/admin/UsersList.js",[],"/home/ibm/shopit/frontend/src/components/admin/UpdateUser.js",[],"/home/ibm/shopit/frontend/src/components/admin/ProductReviews.js",["240","241","242"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { MDBDataTable } from 'mdbreact'\nimport MetaData from '../layouts/MetaData'\nimport Loader from '../layouts/Loader'\nimport Sidebar from './Sidebar'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getProductReviews,deleteReviews, clearErrors } from '../../actions/productActions'\nimport { DELETE_REVIEW_RESET } from '../../constants/productConstants'\n\nconst ProductReviews = () => {\n\n    const [productId, setProductId] = useState('')\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const {loading, error, reviews } = useSelector(state => state.productReviews);\n    const { isDeleted, error: deleteError } = useSelector(state => state.review)\n\n    useEffect(() => {\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n\n        // if (deleteError) {\n        //     alert.error(deleteError);\n        //     dispatch(clearErrors())\n        // }\n\n        if (productId !== '') {\n            dispatch(getProductReviews(productId))\n        }\n\n        if (isDeleted) {\n            alert.success('Review deleted successfully');\n            dispatch({ type: DELETE_REVIEW_RESET })\n        }\n\n\n\n    }, [dispatch, alert, error, productId ,isDeleted])\n\n    const deleteReviewHandler = (id) => {\n        dispatch(deleteReviews(id, productId))\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(getProductReviews(productId))\n    }\n\n    const setReviews = () => {\n        const data = {\n            columns: [\n                {\n                    label: 'Review ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Rating',\n                    field: 'rating',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Comment',\n                    field: 'comment',\n                    sort: 'asc'\n                },\n                {\n                    label: 'User',\n                    field: 'user',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                },\n            ],\n            rows: []\n        }\n\n        reviews.forEach(review => {\n            data.rows.push({\n                id: review._id,\n                rating: review.rating,\n                comment: review.comment,\n                user: review.name,\n\n                actions:\n                    <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={()=> deleteReviewHandler(review._id)   }>\n                        <i className=\"fa fa-trash\"></i>\n                    </button>\n            })\n        })\n\n        return data;\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Product Reviews'} />\n            <div className=\"row\">\n                <div className=\"col-12 col-md-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                        <div className=\"row justify-content-center mt-5\">\n                            <div className=\"col-5\">\n                                <form onSubmit={submitHandler}>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"productId_field\">Enter Product ID</label>\n                                        <input\n                                            type=\"text\"\n                                            id=\"productId_field\"\n                                            className=\"form-control\"\n                                            value={productId}\n                                            onChange={(e) => setProductId(e.target.value)}\n                                        />\n                                    </div>\n\n                                    <button\n                                        id=\"search_button\"\n                                        type=\"submit\"\n                                        className=\"btn btn-primary btn-block py-2\"\n                                    >\n                                        SEARCH\n\t\t\t\t\t\t\t\t    </button>\n                                </ form>\n                            </div>\n\n                        </div>\n\n                        {reviews && reviews.length > 0 ? (\n                            <MDBDataTable\n                                data={setReviews()}\n                                className=\"px-3\"\n                                bordered\n                                striped\n                                hover\n                            />\n                        ) : (\n                                <p className=\"mt-5 text-center\">No Reviews.</p>\n                            )}\n\n\n                    </Fragment>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\nexport default ProductReviews",{"ruleId":"243","severity":1,"message":"244","line":2,"column":23,"nodeType":"245","messageId":"246","endLine":2,"endColumn":29},{"ruleId":"243","severity":1,"message":"247","line":9,"column":8,"nodeType":"245","messageId":"246","endLine":9,"endColumn":16},{"ruleId":"243","severity":1,"message":"248","line":12,"column":5,"nodeType":"245","messageId":"246","endLine":12,"endColumn":27},{"ruleId":"243","severity":1,"message":"249","line":14,"column":5,"nodeType":"245","messageId":"246","endLine":14,"endColumn":25},{"ruleId":"243","severity":1,"message":"250","line":19,"column":5,"nodeType":"245","messageId":"246","endLine":19,"endColumn":25},{"ruleId":"243","severity":1,"message":"251","line":27,"column":5,"nodeType":"245","messageId":"246","endLine":27,"endColumn":21},{"ruleId":"243","severity":1,"message":"252","line":35,"column":5,"nodeType":"245","messageId":"246","endLine":35,"endColumn":24},{"ruleId":"253","severity":1,"message":"254","line":8,"column":17,"nodeType":"255","endLine":11,"endColumn":19},{"ruleId":"243","severity":1,"message":"256","line":12,"column":8,"nodeType":"245","messageId":"246","endLine":12,"endColumn":19},{"ruleId":"257","severity":1,"message":"258","line":39,"column":6,"nodeType":"259","endLine":39,"endColumn":58,"suggestions":"260"},{"ruleId":"243","severity":1,"message":"261","line":40,"column":5,"nodeType":"245","messageId":"246","endLine":40,"endColumn":22},{"ruleId":"257","severity":1,"message":"262","line":46,"column":8,"nodeType":"259","endLine":46,"endColumn":60,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":20,"column":32,"nodeType":"266","messageId":"267","endLine":20,"endColumn":34},{"ruleId":"257","severity":1,"message":"268","line":49,"column":8,"nodeType":"259","endLine":49,"endColumn":54,"suggestions":"269"},{"ruleId":"257","severity":1,"message":"262","line":49,"column":8,"nodeType":"259","endLine":49,"endColumn":54,"suggestions":"270"},{"ruleId":"243","severity":1,"message":"271","line":7,"column":10,"nodeType":"245","messageId":"246","endLine":7,"endColumn":18},{"ruleId":"243","severity":1,"message":"272","line":1,"column":10,"nodeType":"245","messageId":"246","endLine":1,"endColumn":18},{"ruleId":"243","severity":1,"message":"273","line":17,"column":5,"nodeType":"245","messageId":"246","endLine":17,"endColumn":25},{"ruleId":"243","severity":1,"message":"274","line":19,"column":5,"nodeType":"245","messageId":"246","endLine":19,"endColumn":22},{"ruleId":"243","severity":1,"message":"249","line":10,"column":10,"nodeType":"245","messageId":"246","endLine":10,"endColumn":30},{"ruleId":"243","severity":1,"message":"275","line":4,"column":8,"nodeType":"245","messageId":"246","endLine":4,"endColumn":14},{"ruleId":"243","severity":1,"message":"275","line":4,"column":8,"nodeType":"245","messageId":"246","endLine":4,"endColumn":14},{"ruleId":"243","severity":1,"message":"276","line":19,"column":12,"nodeType":"245","messageId":"246","endLine":19,"endColumn":19},{"ruleId":"243","severity":1,"message":"277","line":20,"column":31,"nodeType":"245","messageId":"246","endLine":20,"endColumn":42},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Shipping' is defined but never used.","'DELETE_PRODUCT_REQUEST' is defined but never used.","'DELETE_PRODUCT_RESET' is defined but never used.","'UPDATE_PRODUCT_RESET' is defined but never used.","'NEW_REVIEW_RESET' is defined but never used.","'DELETE_REVIEW_RESET' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ListReviews' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alert' and 'redirect'. Either include them or remove the dependency array.","ArrayExpression",["278"],"'DELETE_USER_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'alert'. Either include it or remove the dependency array.",["279"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'alert' and 'user'. Either include them or remove the dependency array.",["280"],["281"],"'useAlert' is defined but never used.","'Fragment' is defined but never used.","'DELETE_ORDER_SUCCESS' is defined but never used.","'DELETE_ORDER_FAIL' is defined but never used.","'Loader' is defined but never used.","'loading' is assigned a value but never used.","'deleteError' is assigned a value but never used.",{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},"Update the dependencies array to be: [dispatch, isAuthenticated, loading, error, history, redirect, alert]",{"range":"290","text":"291"},"Update the dependencies array to be: [dispatch, isAuthenticated, loading, error, history, alert]",{"range":"292","text":"293"},"Update the dependencies array to be: [dispatch, loading, error, history, isUpdated, user, alert]",{"range":"294","text":"295"},"Update the dependencies array to be: [dispatch, loading, error, history, isUpdated, alert]",{"range":"296","text":"297"},[903,955],"[dispatch, isAuthenticated, loading, error, history, redirect, alert]",[942,994],"[dispatch, isAuthenticated, loading, error, history, alert]",[1318,1364],"[dispatch, loading, error, history, isUpdated, user, alert]",[998,1044],"[dispatch, loading, error, history, isUpdated, alert]"]