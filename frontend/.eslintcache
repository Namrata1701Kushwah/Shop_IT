[{"/home/ibm/shopit/frontend/src/index.js":"1","/home/ibm/shopit/frontend/src/App.js":"2","/home/ibm/shopit/frontend/src/components/layouts/Header.js":"3","/home/ibm/shopit/frontend/src/components/layouts/Footer.js":"4","/home/ibm/shopit/frontend/src/components/Home.js":"5","/home/ibm/shopit/frontend/src/components/layouts/MetaData.js":"6","/home/ibm/shopit/frontend/src/store.js":"7","/home/ibm/shopit/frontend/src/reducers/productReducers.js":"8","/home/ibm/shopit/frontend/src/constants/productConstants.js":"9","/home/ibm/shopit/frontend/src/actions/productActions.js":"10","/home/ibm/shopit/frontend/src/components/product/Product.js":"11","/home/ibm/shopit/frontend/src/components/product/productDetails.js":"12","/home/ibm/shopit/frontend/src/components/layouts/Loader.js":"13","/home/ibm/shopit/frontend/src/components/layouts/Search.js":"14","/home/ibm/shopit/frontend/src/reducers/userReducers.js":"15","/home/ibm/shopit/frontend/src/constants/userConstants.js":"16","/home/ibm/shopit/frontend/src/components/user/Login.js":"17","/home/ibm/shopit/frontend/src/actions/userActions.js":"18","/home/ibm/shopit/frontend/src/components/user/Register.js":"19","/home/ibm/shopit/frontend/src/components/user/Profile.js":"20","/home/ibm/shopit/frontend/src/components/route/ProtectedRoute.js":"21","/home/ibm/shopit/frontend/src/components/user/UpdateProfile.js":"22","/home/ibm/shopit/frontend/src/components/user/UpdatePassword.js":"23","/home/ibm/shopit/frontend/src/components/user/ForgotPassword.js":"24","/home/ibm/shopit/frontend/src/components/user/NewPassword.js":"25","/home/ibm/shopit/frontend/src/reducers/cartReducers.js":"26","/home/ibm/shopit/frontend/src/constants/cartConstant.js":"27","/home/ibm/shopit/frontend/src/actions/cartActions.js":"28","/home/ibm/shopit/frontend/src/components/cart/Cart.js":"29","/home/ibm/shopit/frontend/src/components/cart/Shipping.js":"30","/home/ibm/shopit/frontend/src/components/cart/checkoutSteps.js":"31"},{"size":585,"mtime":1654067602189,"results":"32","hashOfConfig":"33"},{"size":1980,"mtime":1654864112637,"results":"34","hashOfConfig":"33"},{"size":3366,"mtime":1654847821779,"results":"35","hashOfConfig":"33"},{"size":289,"mtime":1653980434980,"results":"36","hashOfConfig":"33"},{"size":8681,"mtime":1654581574624,"results":"37","hashOfConfig":"33"},{"size":198,"mtime":1653635992825,"results":"38","hashOfConfig":"33"},{"size":1234,"mtime":1654862939554,"results":"39","hashOfConfig":"33"},{"size":1784,"mtime":1654508856636,"results":"40","hashOfConfig":"33"},{"size":413,"mtime":1654070870329,"results":"41","hashOfConfig":"33"},{"size":1962,"mtime":1654577516456,"results":"42","hashOfConfig":"33"},{"size":1207,"mtime":1654494507055,"results":"43","hashOfConfig":"33"},{"size":14582,"mtime":1654845301977,"results":"44","hashOfConfig":"33"},{"size":134,"mtime":1654080588089,"results":"45","hashOfConfig":"33"},{"size":1108,"mtime":1654239326122,"results":"46","hashOfConfig":"33"},{"size":4643,"mtime":1654781120340,"results":"47","hashOfConfig":"33"},{"size":1459,"mtime":1654780718429,"results":"48","hashOfConfig":"33"},{"size":2640,"mtime":1654863377008,"results":"49","hashOfConfig":"33"},{"size":5290,"mtime":1654781512850,"results":"50","hashOfConfig":"33"},{"size":5749,"mtime":1654681941076,"results":"51","hashOfConfig":"33"},{"size":2085,"mtime":1654759307890,"results":"52","hashOfConfig":"33"},{"size":756,"mtime":1654762077852,"results":"53","hashOfConfig":"33"},{"size":5078,"mtime":1654772940912,"results":"54","hashOfConfig":"33"},{"size":2985,"mtime":1654778473509,"results":"55","hashOfConfig":"33"},{"size":4638,"mtime":1654836201787,"results":"56","hashOfConfig":"33"},{"size":2890,"mtime":1654835997673,"results":"57","hashOfConfig":"33"},{"size":1329,"mtime":1654863010813,"results":"58","hashOfConfig":"33"},{"size":148,"mtime":1654857052956,"results":"59","hashOfConfig":"33"},{"size":1223,"mtime":1654863055117,"results":"60","hashOfConfig":"33"},{"size":3957,"mtime":1654864176454,"results":"61","hashOfConfig":"33"},{"size":9774,"mtime":1654868098941,"results":"62","hashOfConfig":"33"},{"size":1736,"mtime":1654868079593,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"w4cq39",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ibm/shopit/frontend/src/index.js",[],["137","138"],"/home/ibm/shopit/frontend/src/App.js",[],"/home/ibm/shopit/frontend/src/components/layouts/Header.js",["139"],"import '../../App.css'\nimport { Link, Route, Router } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useAlert } from \"react-alert\"\n\nimport { Fragment } from \"react\";\nimport Search from './Search';\n\nimport { logout } from '../../actions/userActions';\n\nconst Header = () => {\n    const alert = useAlert();\n    const dispatch = useDispatch()\n\n    const { user, loading } = useSelector(state => state.auth)\n    const {cartItems}= useSelector(state=>state.cart)\n\n    const logoutHandler =()=>{\n            dispatch(logout());\n            alert.success('Logged out successfully')\n    }\n\n    return (\n        <Fragment>\n            <nav className=\"navbar row\">\n                <div className=\"col-12 col-md-3\">\n                    <div className=\"navbar-brand\">\n                        <Link to=\"/\">\n                            <img src=\"/images/shopit_logo.png\" alt=\"icon\" />\n                        </Link>\n\n                    </div>\n                </div>\n\n                <div className=\"col-12 col-md-6 mt-2 mt-md-0\">\n                    <Route render={({ history }) => <Search history={history} />} />\n\n                </div>\n\n                <div className=\"col-12 col-md-3 mt-4 mt-md-0 text-center\">\n                    <Link to=\"/cart\" style={{ textDecoration: 'none' }}>\n                        <span id=\"cart\" className=\"ml-3\">Cart</span>\n                        <span className=\"ml-1\" id=\"cart_count\">{cartItems.length}</span>\n                    </Link>\n\n                    {user ? (\n                        <div className='ml-4 dropdown d-inline'>\n                            <Link to=\"#!\" className='btn dropdown-toggle text-white mr-4 mt-3'\n                                type=\"button\" id=\"dropDownMenuButton\" data-toggle='dropdown'\n                                area-aria-haspopup=\"true\" aria-expanded=\"false\">\n\n                                <figure clasName=\"avatar.avatar-nav\">\n                                    <img src={user.avatar && user.avatar.url} \n                                        alt={user && user.name}\n                                        className=\"rounded-circle\"\n                                    /><span  style ={{marginLeft:\"12px\"}}>{user && user.name}</span>\n                                </figure>\n\n                                \n                            </Link>\n\n                            <div className='dropdown-menu'  aria-labelledby='dropDownMenuButton'>\n                                {user && user.role !== 'admin' ? (\n                                    <Link className='dropdown-item' to=\"/orders/me\">Orders</Link>\n                                ) : (\n                                    <Link  className='dropdown-item' to=\"/dashboard\">Dashboard</Link>\n                                )}\n                                 <Link className='dropdown-item' to=\"/me\">Profile</Link>\n                                <Link className='dropdown-item  text-danger' to=\"/\" onClick={logoutHandler}>\n                                    Logout\n                                </Link>\n\n                        </div>\n                        </div>\n\n                    ) : !loading && <Link to=\"/login\" className=\"btn ml-4\" id=\"login_btn\">Login</Link>\n                    }\n\n\n                </div>\n            </nav>\n       </Fragment>\n    )\n\n}\n\nexport default Header;","/home/ibm/shopit/frontend/src/components/layouts/Footer.js",[],"/home/ibm/shopit/frontend/src/components/Home.js",[],"/home/ibm/shopit/frontend/src/components/layouts/MetaData.js",[],"/home/ibm/shopit/frontend/src/store.js",["140"],"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {productsReducer,productDetailsReducer} from './reducers/productReducers'\nimport { authReducer, userReducers,forgotPasswordReducer} from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport Shipping from './components/cart/Shipping';\n\nconst reducer = combineReducers({\n products : productsReducer,\n productDetails : productDetailsReducer,\n auth : authReducer,\n user : userReducers,\n forgotPassword : forgotPasswordReducer,\n cart : cartReducer\n})\n\n\nlet initialState = {\n    cart: {\n        cartItems: localStorage.getItem('cartItems')\n            ? JSON.parse(localStorage.getItem('cartItems'))\n            : [],\n        shippingInfo: localStorage.getItem('shippingInfo')\n            ? JSON.parse(localStorage.getItem('shippingInfo'))\n            : {}\n    }\n}\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store; \n\n\n// fragment\n// useEffect\n// thunk\n// export vs default export\n// package-lock.json // \n// formatting\n// git","/home/ibm/shopit/frontend/src/reducers/productReducers.js",["141"],"import {\n    ALL_PRODUCTS_REQUEST,\n    ALL_PRODUCTS_SUCCESS,\n    ALL_PRODUCTS_FAIL,\n    CLEAR_ERRORS,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL\n} from '../constants/productConstants'\n\n\n\n\nexport const productsReducer = (state = { products: [] }, action) => {\n    switch (action.type) {\n        case ALL_PRODUCTS_REQUEST:\n            return {\n                loading: true,\n                products: []\n            }\n        case ALL_PRODUCTS_SUCCESS:\n            return {\n                loading: false,\n                products: action.payload.products,\n                productsCount: action.payload.productsCount,\n                resPerPage: action.payload. resPerPage,\n                filteredProductsCount:action.payload.filteredProductsCount\n            }\n        case ALL_PRODUCTS_FAIL:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case CLEAR_ERRORS:\n            return {\n                ...state,\n                error: null\n            }\n        default:\n            return state;\n    }\n}\n\nexport const productDetailsReducer = (state = { product: {} }, action) => {\n    switch (action.type) {\n        case PRODUCT_DETAILS_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n        case PRODUCT_DETAILS_SUCCESS:\n\n            return {\n                loading: false,\n                product: action.payload\n            }\n        case PRODUCT_DETAILS_FAIL:\n            return {\n                ...state,\n                error: action.payload\n            }\n        case CLEAR_ERRORS:\n            return {\n                ...state,\n                error: null\n            }\n        default:\n            return state;\n    }\n}","/home/ibm/shopit/frontend/src/constants/productConstants.js",[],"/home/ibm/shopit/frontend/src/actions/productActions.js",[],"/home/ibm/shopit/frontend/src/components/product/Product.js",["142"],"import {Link} from 'react-router-dom'\n\n\nconst Product =({product, col})=>{\n    return (\n        <div className={`col-sm-12 col-md-6 col-lg-${col} my-3`}>\n            <div className=\"card p-3 rounded\">\n                <img\n                    className=\"card-img-top mx-auto\"\n                    src={product.images[0].url}\n                />\n                <div className=\"card-body d-flex flex-column\">\n                    <h5 className=\"card-title\">\n                        <Link to={`/product/${product._id}`}>{product.name}</Link>\n                    </h5>\n                    <div className=\"ratings mt-auto\">\n                        <div className=\"rating-outer\">\n                            <div className=\"rating-inner\" style={{width:`${(product.ratings / 5)*100}%`}}></div>\n                        </div>\n                        <span id=\"no_of_reviews\">({product.numOfReviews} Reviews)</span>\n                    </div>\n                    <p className=\"card-text\">Rs.{product.price}</p>\n                    <Link to={`/product/${product._id} `}id=\"view_btn\" className=\"btn btn-block\">View Details</Link>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\n\nexport default Product;","/home/ibm/shopit/frontend/src/components/product/productDetails.js",[],"/home/ibm/shopit/frontend/src/components/layouts/Loader.js",[],"/home/ibm/shopit/frontend/src/components/layouts/Search.js",[],"/home/ibm/shopit/frontend/src/reducers/userReducers.js",[],"/home/ibm/shopit/frontend/src/constants/userConstants.js",[],"/home/ibm/shopit/frontend/src/components/user/Login.js",["143"],"import { Fragment, useEffect, useState } from \"react\";\nimport Loader from \"../layouts/Loader\";\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {login, clearErrors} from '../../actions/userActions';\nimport { Link } from 'react-router-dom';\n\n\n\nconst Login = ({history, location})=>{\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const alert = useAlert();\n\n    const dispatch =useDispatch();\n\n    const {isAuthenticated, error, loading} = useSelector(state =>state.auth )\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    useEffect(()=>{\n\n         if(isAuthenticated){\n             history.push(redirect)\n         }\n\n\n        if(error){\n            alert.error(error)\n            dispatch(clearErrors()); \n        }\n\n    },[dispatch, isAuthenticated, loading, error, history])\n\n    const submitHandler =(e)=>{\n               e.preventDefault();\n               dispatch(login(email,password))\n    }\n\n\n    return (\n       <Fragment>\n           {loading ? <Loader /> :  (\n               <Fragment>\n                   <MetaData title={'Login'} />\n                   <div className=\"row wrapper\"> \n\t\t<div className=\"col-10 col-lg-5\">\n        <form className=\"shadow-lg\" onSubmit={submitHandler}>\n            <h1 className=\"mb-3\">Login</h1>\n            <div className=\"form-group\">\n              <label htmlFor=\"email_field\">Email</label>\n              <input\n                type=\"email\"\n                id=\"email_field\"\n                className=\"form-control\"\n                value={email}\n                onChange ={(e)=>setEmail(e.target.value)}\n              />\n            </div>\n  \n            <div className=\"form-group\">\n              <label htmlFor=\"password_field\">Password</label>\n              <input\n                type=\"password\"\n                id=\"password_field\"\n                className=\"form-control\"\n                value={password}\n                onChange ={(e)=>setPassword(e.target.value)}\n              />\n            </div>\n\n            <Link to=\"/password/forgot\" className=\"float-right mb-4\">Forgot Password?</Link>\n  \n            <button\n              id=\"login_button\"\n              type=\"submit\"\n              className=\"btn btn-block py-3\"\n            >\n              LOGIN\n            </button>\n\n            <Link to=\"/register\" className=\"float-right mt-3\">New User?</Link>\n          </form>\n\t\t  </div>\n    </div>\n                   \n                   </Fragment>\n           )}\n       </Fragment>\n    )\n}\n\nexport default Login;","/home/ibm/shopit/frontend/src/actions/userActions.js",[],"/home/ibm/shopit/frontend/src/components/user/Register.js",["144"],"import { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { register, clearErrors } from '../../actions/userActions';\n\n\n\n\n\n\n\nconst Register = ({ history }) => {\n\n    const [user, setUser] = useState({\n        name: '',\n        email: '',\n        password: ''\n    })\n\n    const { name, email, password } = user;\n\n    const [avatar, setAvatar] = useState('')\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n    const { isAuthenticated, error, loading } = useSelector(state => state.auth)\n\n    useEffect(() => {\n\n        if (isAuthenticated) {\n            history.push('/')\n        }\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n    }, [dispatch, isAuthenticated, loading, error, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('password', password);\n        formData.set('avatar', avatar);\n\n        dispatch(register(formData))\n     }\n\n     const onChange = e =>{\n         if(e.target.name === 'avatar'){\n\n            const reader = new FileReader();\n\n            reader.onload=()=>{\n                if(reader.readyState===2){\n                    setAvatarPreview(reader.result)\n                    setAvatar(reader.result)\n                }\n            }\n\n            reader.readAsDataURL(e.target.files[0])\n\n         } else{\n               setUser({...user, [e.target.name]: [e.target.value]})\n            }\n     }\n\n    return (\n        <Fragment>\n\n            <MetaData title={'Register User'} />\n\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\n                        <h1 className=\"mb-3\">Register</h1>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Name</label>\n                            <input \n                            type=\"name\" \n                            id=\"name_field\" \n                            className=\"form-control\"\n                            name = 'name'\n                            value={name}\n                            onChange = {onChange}  />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email_field\"\n                                className=\"form-control\"\n                                name = 'email'\n                                value={email}\n                                onChange = {onChange}\n\n                                // name='email'\n                                // value={email}\n                                // onChange={onChange}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password_field\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password_field\"\n                                className=\"form-control\"\n                               name='password'\n                                value={password}\n                                onChange={onChange}\n                            />\n                        </div>\n\n                        <div className='form-group'>\n                            <label htmlFor='avatar_upload'>Avatar</label>\n                            <div className='d-flex align-items-center'>\n                                <div>\n                                    <figure className='avatar mr-3 item-rtl'>\n                                        <img\n                                            src={avatarPreview }\n                                            className='rounded-circle'\n                                            alt='Avatar Preview'\n                                        />\n                                    </figure>\n                                </div>\n                                <div className='custom-file'>\n                                    <input\n                                        type='file'\n                                        name='avatar'\n                                        className='custom-file-input'\n                                        id='customFile'\n                                        accept=\"images/*\"\n                                        onChange={onChange}\n                                    />\n                                    <label className='custom-file-label' htmlFor='customFile'>\n                                        Choose Avatar\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <button\n                            id=\"register_button\"\n                            type=\"submit\"\n                            className=\"btn btn-block py-3\"\n                            disabled={loading ? true : false}\n                        >\n                            REGISTER\n                        </button>\n                    </form>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default Register;","/home/ibm/shopit/frontend/src/components/user/Profile.js",[],"/home/ibm/shopit/frontend/src/components/route/ProtectedRoute.js",["145"],"import { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { Fragment } from 'react';\n\n\n\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n    const { isAuthenticated, loading, user } = useSelector(state => state.auth)\n    return (\n        <Fragment>\n            {loading === false && (\n                <Route\n                    {...rest}\n                    render={props => {\n                        if (isAuthenticated === false) {\n                            return <Redirect to=\"/login\" />\n                        }\n                        return  <Component {...props} />\n                    }}\n                />\n            )}\n\n        </Fragment>\n\n\n    )\n}\n\n\nexport default ProtectedRoute;","/home/ibm/shopit/frontend/src/components/user/UpdateProfile.js",["146"],"import { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateProfile, loadUser, clearErrors } from '../../actions/userActions';\nimport { UPDATE_PROFILE_RESET } from \"../../constants/userConstants\";\n\n\nconst UpdateProfile = ({ history }) => {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [avatar, setAvatar] = useState('')\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n    const { user } = useSelector(state => state.auth)\n    const { error, isUpdated, loading } = useSelector(state => state.user)\n\n    useEffect(() => {\n\n        if (user) {\n            setName(user.name);\n            setEmail(user.email);\n            setAvatarPreview(user.avatar.url)\n        }\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n        if (isUpdated) {\n            alert.success('user updated sucessfully')\n            dispatch(loadUser());\n\n            history.push('/me')\n\n            dispatch({\n                type: UPDATE_PROFILE_RESET\n            })\n        }\n\n    }, [dispatch, loading, error, history, isUpdated])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('avatar', avatar);\n\n        dispatch(updateProfile(formData))\n    }\n\n    const onChange = e => {\n\n\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            if (reader.readyState === 2) {\n                setAvatarPreview(reader.result)\n                setAvatar(reader.result)\n            }\n        }\n\n        reader.readAsDataURL(e.target.files[0])\n\n\n    }\n    return (\n        <Fragment>\n            <MetaData title={'update profile'} />\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\n                        <h1 className=\"mt-2 mb-5\">Update Profile</h1>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Name</label>\n                            <input \n\t\t\t\t\t\t\t\ttype=\"name\" \n\t\t\t\t\t\t\t\tid=\"name_field\" \n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n                                name='name'\n                                value={name}\n                                onChange={(e)=>setName(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email_field\"\n                                className=\"form-control\"\n                                name='email'\n                                value={email}\n                                onChange={(e)=>setEmail(e.target.value)}\n                            />\n                        </div>\n\n                        <div className='form-group'>\n                            <label htmlFor='avatar_upload'>Avatar</label>\n                            <div className='d-flex align-items-center'>\n                                <div>\n                                    <figure className='avatar mr-3 item-rtl'>\n                                        <img\n                                            src={avatarPreview}\n                                            className='rounded-circle'\n                                            alt='Avatar Preview'\n                                        />\n                                    </figure>\n                                </div>\n                                <div className='custom-file'>\n                                    <input\n                                        type='file'\n                                        name='avatar'\n                                        className='custom-file-input'\n                                        id='customFile'\n                                        accept=\"image/*\"\n                                        onChange={onChange}\n                                    />\n                                    <label className='custom-file-label' htmlFor='customFile'>\n                                        Choose Avatar\n                                </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\"\n                          disabled={loading ? true : false} >Update</button>\n                    </form>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default UpdateProfile;","/home/ibm/shopit/frontend/src/components/user/UpdatePassword.js",["147"],"import { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updatePassword, clearErrors } from '../../actions/userActions';\nimport { UPDATE_PASSWORD_RESET } from \"../../constants/userConstants\";\n\n\n\n\n\n\nconst UpdatePassword = ({history}) =>{\n\n    const [oldPassword, setOldPassword] = useState('')\n    \n    const [password, setPassword] = useState('')\n\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n \n    const { error, isUpdated, loading } = useSelector(state => state.user)\n\n    useEffect(() => {\n\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n        if (isUpdated) {\n            alert.success('Password updated sucessfully')\n           \n\n            history.push('/me')\n\n            dispatch({\n                type: UPDATE_PASSWORD_RESET\n            })\n        }\n\n    }, [dispatch, loading, error, history, isUpdated])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('oldPassword', oldPassword);\n        formData.set('password', password);\n      \n\n        dispatch(updatePassword(formData))\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Change Password'}/>\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler}>\n                        <h1 className=\"mt-2 mb-5\">Update Password</h1>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"old_password_field\">Old Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"old_password_field\"\n                                className=\"form-control\"\n                                value={oldPassword}\n                                onChange={(e)=>setOldPassword(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"new_password_field\">New Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"new_password_field\"\n                                className=\"form-control\"\n                                value={password}\n                                onChange={(e)=>setPassword(e.target.value)}\n                            />\n                        </div>\n\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\"\n                            disabled={loading ? true : false} >Update Password</button>\n                    </form>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default UpdatePassword;","/home/ibm/shopit/frontend/src/components/user/ForgotPassword.js",[],"/home/ibm/shopit/frontend/src/components/user/NewPassword.js",["148"],"\nimport { Fragment, useEffect, useState } from \"react\";\n\nimport MetaData from \"../layouts/MetaData\";\n\nimport { useAlert } from \"react-alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetPassword, clearErrors } from '../../actions/userActions';\nimport { UPDATE_PASSWORD_RESET } from \"../../constants/userConstants\";\n\n\n\n\n\n\nconst NewPassword= ({history , match})=>{\n\n    const [password, setPassword] = useState('')\n    const [confirmpassword, setConfirmPassword] = useState('')\n    \n\n\n\n    const alert = useAlert();\n\n    const dispatch = useDispatch();\n\n \n    const { error, success} = useSelector(state => state.ForgotPassword)\n\n    useEffect(() => {\n\n\n\n        if (error) {\n            alert.error(error)\n            dispatch(clearErrors());\n        }\n\n        if (success) {\n            alert.success('Password updated successfully')\n            history.push('/login')\n        }\n\n    }, [dispatch, alert, error, success, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('password', password);\n        formData.set('confirmpassword', confirmpassword);\n    \n      \n\n        dispatch(resetPassword(match.pasrams.token,formData))\n    }\n\n\n\n    return (\n        <Fragment>\n            <MetaData title={'New Password Reset'} />\n\n            <div className=\"row wrapper\">\n            <div className=\"col-10 col-lg-5\">\n                <form className=\"shadow-lg\" onSubmit={submitHandler}>\n                    <h1 className=\"mb-3\">New Password</h1>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password_field\">Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"password_field\"\n                            className=\"form-control\"\n                            value={password}\n                            onChange ={(e)=>setPassword(e.target.value)}\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"confirm_password_field\">Confirm Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"confirm_password_field\"\n                            className=\"form-control\"\n                            value={confirmpassword}\n                            onChange ={(e)=>setConfirmPassword(e.target.value)}\n                        />\n                    </div>\n\n                    <button\n                        id=\"new_password_button\"\n                        type=\"submit\"\n                        className=\"btn btn-block py-3\">\n                        Set Password\n                    </button>\n\n                </form>\n            </div>\n        </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default NewPassword;","/home/ibm/shopit/frontend/src/reducers/cartReducers.js",[],"/home/ibm/shopit/frontend/src/constants/cartConstant.js",[],"/home/ibm/shopit/frontend/src/actions/cartActions.js",[],"/home/ibm/shopit/frontend/src/components/cart/Cart.js",["149"],"/home/ibm/shopit/frontend/src/components/cart/Shipping.js",[],"/home/ibm/shopit/frontend/src/components/cart/checkoutSteps.js",["150"],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":2,"column":23,"nodeType":"157","messageId":"158","endLine":2,"endColumn":29},{"ruleId":"155","severity":1,"message":"159","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":16},{"ruleId":"160","severity":1,"message":"161","line":26,"column":29,"nodeType":"162","messageId":"163","endLine":26,"endColumn":55,"fix":"164"},{"ruleId":"165","severity":1,"message":"166","line":8,"column":17,"nodeType":"167","endLine":11,"endColumn":19},{"ruleId":"168","severity":1,"message":"169","line":37,"column":7,"nodeType":"170","endLine":37,"endColumn":59,"suggestions":"171"},{"ruleId":"168","severity":1,"message":"172","line":46,"column":8,"nodeType":"170","endLine":46,"endColumn":60,"suggestions":"173"},{"ruleId":"155","severity":1,"message":"174","line":8,"column":39,"nodeType":"157","messageId":"158","endLine":8,"endColumn":43},{"ruleId":"168","severity":1,"message":"175","line":49,"column":8,"nodeType":"170","endLine":49,"endColumn":54,"suggestions":"176"},{"ruleId":"168","severity":1,"message":"172","line":49,"column":8,"nodeType":"170","endLine":49,"endColumn":54,"suggestions":"177"},{"ruleId":"155","severity":1,"message":"178","line":9,"column":10,"nodeType":"157","messageId":"158","endLine":9,"endColumn":31},{"ruleId":"155","severity":1,"message":"179","line":7,"column":10,"nodeType":"157","messageId":"158","endLine":7,"endColumn":18},{"ruleId":"155","severity":1,"message":"180","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":18},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Shipping' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property resPerPage.","MemberExpression","unexpectedWhitespace",{"range":"183","text":"184"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alert' and 'redirect'. Either include them or remove the dependency array.","ArrayExpression",["185"],"React Hook useEffect has a missing dependency: 'alert'. Either include it or remove the dependency array.",["186"],"'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'alert' and 'user'. Either include them or remove the dependency array.",["187"],["188"],"'UPDATE_PASSWORD_RESET' is defined but never used.","'useAlert' is defined but never used.","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation",[698,700],".",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [dispatch, isAuthenticated, loading, error, history, redirect, alert]",{"range":"197","text":"198"},"Update the dependencies array to be: [dispatch, isAuthenticated, loading, error, history, alert]",{"range":"199","text":"200"},"Update the dependencies array to be: [dispatch, loading, error, history, isUpdated, user, alert]",{"range":"201","text":"202"},"Update the dependencies array to be: [dispatch, loading, error, history, isUpdated, alert]",{"range":"203","text":"204"},[903,955],"[dispatch, isAuthenticated, loading, error, history, redirect, alert]",[942,994],"[dispatch, isAuthenticated, loading, error, history, alert]",[1318,1364],"[dispatch, loading, error, history, isUpdated, user, alert]",[998,1044],"[dispatch, loading, error, history, isUpdated, alert]"]