{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productsReducer, productDetailsReducer, newReviewReducer, productReviewsReducer, newProductReducer, productReducer } from './reducers/productReducers';\nimport { authReducer, userReducers, forgotPasswordReducer, allUsersReducer, userDetailsReducer } from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { newOrderReducer, myOrdersReducer, orderDetailsReducer, allOrdersReducer, orderReducer } from './reducers/orderReducers';\nimport Shipping from './components/cart/Shipping';\nconst reducer = combineReducers({\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  product: productReducer,\n  auth: authReducer,\n  user: userReducers,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  forgotPassword: forgotPasswordReducer,\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  newReview: newReviewReducer,\n  productReviews: productReviewsReducer,\n  newProduct: newProductReducer,\n  allOrders: allOrdersReducer,\n  order: orderReducer\n});\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [],\n    shippingInfo: localStorage.getItem('shippingInfo') ? JSON.parse(localStorage.getItem('shippingInfo')) : {}\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store; // fragment\n// useEffect\n// thunk\n// export vs default export\n// package-lock.json // \n// formatting\n// git","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productsReducer","productDetailsReducer","newReviewReducer","productReviewsReducer","newProductReducer","productReducer","authReducer","userReducers","forgotPasswordReducer","allUsersReducer","userDetailsReducer","cartReducer","newOrderReducer","myOrdersReducer","orderDetailsReducer","allOrdersReducer","orderReducer","Shipping","reducer","products","productDetails","product","auth","user","allUsers","userDetails","forgotPassword","cart","newOrder","myOrders","orderDetails","newReview","productReviews","newProduct","allOrders","order","initialState","cartItems","localStorage","getItem","JSON","parse","shippingInfo","middleware","store"],"sources":["/home/ibm/shopit/frontend/src/store.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {productsReducer,productDetailsReducer ,newReviewReducer,productReviewsReducer,newProductReducer,productReducer} from './reducers/productReducers'\nimport { authReducer, userReducers,forgotPasswordReducer,allUsersReducer , userDetailsReducer} from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport {newOrderReducer, myOrdersReducer, orderDetailsReducer,allOrdersReducer ,orderReducer} from './reducers/orderReducers'\nimport Shipping from './components/cart/Shipping';\n\nconst reducer = combineReducers({\n products : productsReducer,\n productDetails : productDetailsReducer,\n product : productReducer,\n auth : authReducer,\n user : userReducers,\n allUsers : allUsersReducer,\n userDetails : userDetailsReducer,\n forgotPassword : forgotPasswordReducer,\n cart : cartReducer,\n newOrder : newOrderReducer,\n myOrders : myOrdersReducer,\n orderDetails : orderDetailsReducer,\n newReview : newReviewReducer,\n productReviews : productReviewsReducer,\n newProduct : newProductReducer,\n allOrders : allOrdersReducer,\n order : orderReducer\n\n})\n\n\nlet initialState = {\n    cart: {\n        cartItems: localStorage.getItem('cartItems')\n            ? JSON.parse(localStorage.getItem('cartItems'))\n            : [],\n        shippingInfo: localStorage.getItem('shippingInfo')\n            ? JSON.parse(localStorage.getItem('shippingInfo'))\n            : {}\n    }\n}\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store; \n\n\n// fragment\n// useEffect\n// thunk\n// export vs default export\n// package-lock.json // \n// formatting\n// git"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAAQC,eAAR,EAAwBC,qBAAxB,EAA+CC,gBAA/C,EAAgEC,qBAAhE,EAAsFC,iBAAtF,EAAwGC,cAAxG,QAA6H,4BAA7H;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAmCC,qBAAnC,EAAyDC,eAAzD,EAA2EC,kBAA3E,QAAoG,yBAApG;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAAQC,eAAR,EAAyBC,eAAzB,EAA0CC,mBAA1C,EAA8DC,gBAA9D,EAAgFC,YAAhF,QAAmG,0BAAnG;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,MAAMC,OAAO,GAAGtB,eAAe,CAAC;EAC/BuB,QAAQ,EAAGnB,eADoB;EAE/BoB,cAAc,EAAGnB,qBAFc;EAG/BoB,OAAO,EAAGhB,cAHqB;EAI/BiB,IAAI,EAAGhB,WAJwB;EAK/BiB,IAAI,EAAGhB,YALwB;EAM/BiB,QAAQ,EAAGf,eANoB;EAO/BgB,WAAW,EAAGf,kBAPiB;EAQ/BgB,cAAc,EAAGlB,qBARc;EAS/BmB,IAAI,EAAGhB,WATwB;EAU/BiB,QAAQ,EAAGhB,eAVoB;EAW/BiB,QAAQ,EAAGhB,eAXoB;EAY/BiB,YAAY,EAAGhB,mBAZgB;EAa/BiB,SAAS,EAAG7B,gBAbmB;EAc/B8B,cAAc,EAAG7B,qBAdc;EAe/B8B,UAAU,EAAG7B,iBAfkB;EAgB/B8B,SAAS,EAAGnB,gBAhBmB;EAiB/BoB,KAAK,EAAGnB;AAjBuB,CAAD,CAA/B;AAsBA,IAAIoB,YAAY,GAAG;EACfT,IAAI,EAAE;IACFU,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACLC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADK,GAEL,EAHJ;IAIFG,YAAY,EAAEJ,YAAY,CAACC,OAAb,CAAqB,cAArB,IACRC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADQ,GAER;EANJ;AADS,CAAnB;AAWA,MAAMI,UAAU,GAAG,CAAC7C,KAAD,CAAnB;AACA,MAAM8C,KAAK,GAAGjD,WAAW,CAACuB,OAAD,EAAUkB,YAAV,EAAwBrC,mBAAmB,CAACF,eAAe,CAAC,GAAG8C,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}