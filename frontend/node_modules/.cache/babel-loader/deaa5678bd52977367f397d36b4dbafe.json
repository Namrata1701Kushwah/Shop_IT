{"ast":null,"code":"import axios from 'axios';\nimport { CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, CREATE_ORDER_FAIL, MY_ORDERS_REQUEST, MY_ORDERS_SUCCESS, MY_ORDERS_FAIL, ALL_ORDERS_REQUEST, ALL_ORDERS_SUCCESS, ALL_ORDERS_FAIL, UPDATE_ORDER_REQUEST, UPDATE_ORDER_SUCCESS, // UPDATE_ORDER_RESET,\nUPDATE_ORDER_FAIL, DELETE_ORDER_REQUEST, DELETE_ORDER_SUCCESS, // DELETE_ORDER_RESET,\nDELETE_ORDER_FAIL, ORDERS_DETAILS_REQUEST, ORDERS_DETAILS_SUCCESS, ORDERS_DETAILS_FAIL, CLEAR_ERRORS } from '../constants/orderConstant';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/order/new', order, config);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //Get Currently logged in user orders\n\nexport const myOrders = () => async dispatch => {\n  try {\n    dispatch({\n      type: MY_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/orders/me');\n    console.log(data, \"???????????\");\n    dispatch({\n      type: MY_ORDERS_SUCCESS,\n      payload: data.orders\n    });\n  } catch (error) {\n    dispatch({\n      type: MY_ORDERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //Get order details\n\nexport const getOrderDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: ORDERS_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/order/${id}`);\n    console.log(data, \"???????????\");\n    dispatch({\n      type: ORDERS_DETAILS_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDERS_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //Get all orders - ADMIN\n\nexport const allOrders = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/orders`);\n    console.log(data, \"???????????\");\n    dispatch({\n      type: ALL_ORDERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_ORDERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //update order\n\nexport const updateOrder = (id, orderData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/order/${id}`, orderData, config);\n    dispatch({\n      type: UPDATE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //deleted order\n\nexport const deleteOrder = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_ORDER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/admin/order/${id}`);\n    dispatch({\n      type: UPDATE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //Clear Error\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axios","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","CREATE_ORDER_FAIL","MY_ORDERS_REQUEST","MY_ORDERS_SUCCESS","MY_ORDERS_FAIL","ALL_ORDERS_REQUEST","ALL_ORDERS_SUCCESS","ALL_ORDERS_FAIL","UPDATE_ORDER_REQUEST","UPDATE_ORDER_SUCCESS","UPDATE_ORDER_FAIL","DELETE_ORDER_REQUEST","DELETE_ORDER_SUCCESS","DELETE_ORDER_FAIL","ORDERS_DETAILS_REQUEST","ORDERS_DETAILS_SUCCESS","ORDERS_DETAILS_FAIL","CLEAR_ERRORS","createOrder","order","dispatch","getState","type","config","headers","data","post","payload","error","response","message","myOrders","get","console","log","orders","getOrderDetails","id","allOrders","updateOrder","orderData","put","success","deleteOrder","delete","clearErrors"],"sources":["/home/ibm/shopit/frontend/src/actions/orderActions.js"],"sourcesContent":["import axios from 'axios'\nimport {\n    CREATE_ORDER_REQUEST,\n    CREATE_ORDER_SUCCESS,\n    CREATE_ORDER_FAIL,\n    MY_ORDERS_REQUEST,\n    MY_ORDERS_SUCCESS,\n    MY_ORDERS_FAIL,\n    ALL_ORDERS_REQUEST,\n    ALL_ORDERS_SUCCESS,\n    ALL_ORDERS_FAIL,\n    UPDATE_ORDER_REQUEST,\n    UPDATE_ORDER_SUCCESS,\n    // UPDATE_ORDER_RESET,\n    UPDATE_ORDER_FAIL,  \n    DELETE_ORDER_REQUEST,\n    DELETE_ORDER_SUCCESS,\n    // DELETE_ORDER_RESET,\n    DELETE_ORDER_FAIL,\n    ORDERS_DETAILS_REQUEST,\n    ORDERS_DETAILS_SUCCESS,\n    ORDERS_DETAILS_FAIL,\n    CLEAR_ERRORS\n} from '../constants/orderConstant'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: CREATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/order/new', order, config)\n\n        dispatch({\n            type: CREATE_ORDER_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: CREATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n\n\n    }\n}\n\n\n//Get Currently logged in user orders\nexport const myOrders = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: MY_ORDERS_REQUEST });\n\n        const { data } = await axios.get('/api/v1/orders/me')\n        console.log(data,\"???????????\");\n\n        dispatch({\n            type: MY_ORDERS_SUCCESS,\n            payload: data.orders\n        })\n\n    } catch (error) {\n        dispatch({\n            type: MY_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n//Get order details\nexport const getOrderDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: ORDERS_DETAILS_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/order/${id}`)\n        console.log(data,\"???????????\");\n\n        dispatch({\n            type: ORDERS_DETAILS_SUCCESS,\n            payload: data.order\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ORDERS_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n//Get all orders - ADMIN\nexport const allOrders = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_ORDERS_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/admin/orders`)\n        console.log(data,\"???????????\");\n\n        dispatch({\n            type: ALL_ORDERS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n \n//update order\nexport const updateOrder = (id,orderData) => async (dispatch) => {\n    try {\n        dispatch({ type: UPDATE_ORDER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/admin/order/${id}`, orderData, config)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n\n\n    }\n}\n\n//deleted order\nexport const deleteOrder = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: DELETE_ORDER_REQUEST })\n\n        \n\n        const { data } = await axios.delete(`/api/v1/admin/order/${id}`)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n\n\n    }\n}\n\n\n\n//Clear Error\n\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,cANJ,EAOIC,kBAPJ,EAQIC,kBARJ,EASIC,eATJ,EAUIC,oBAVJ,EAWIC,oBAXJ,EAYI;AACAC,iBAbJ,EAcIC,oBAdJ,EAeIC,oBAfJ,EAgBI;AACAC,iBAjBJ,EAkBIC,sBAlBJ,EAmBIC,sBAnBJ,EAoBIC,mBApBJ,EAqBIC,YArBJ,QAsBO,4BAtBP;AAyBA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EAChE,IAAI;IACAD,QAAQ,CAAC;MAAEE,IAAI,EAAEvB;IAAR,CAAD,CAAR;IAEA,MAAMwB,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,gBAAgB;MADX;IADE,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAM3B,KAAK,CAAC4B,IAAN,CAAW,mBAAX,EAAgCP,KAAhC,EAAuCI,MAAvC,CAAvB;IAEAH,QAAQ,CAAC;MACLE,IAAI,EAAEtB,oBADD;MAEL2B,OAAO,EAAEF;IAFJ,CAAD,CAAR;EAKH,CAhBD,CAgBE,OAAOG,KAAP,EAAc;IACZR,QAAQ,CAAC;MACLE,IAAI,EAAErB,iBADD;MAEL0B,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;IAFxB,CAAD,CAAR;EAMH;AACJ,CAzBM,C,CA4BP;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOX,QAAP,IAAoB;EAC9C,IAAI;IAEAA,QAAQ,CAAC;MAAEE,IAAI,EAAEpB;IAAR,CAAD,CAAR;IAEA,MAAM;MAAEuB;IAAF,IAAW,MAAM3B,KAAK,CAACkC,GAAN,CAAU,mBAAV,CAAvB;IACAC,OAAO,CAACC,GAAR,CAAYT,IAAZ,EAAiB,aAAjB;IAEAL,QAAQ,CAAC;MACLE,IAAI,EAAEnB,iBADD;MAELwB,OAAO,EAAEF,IAAI,CAACU;IAFT,CAAD,CAAR;EAKH,CAZD,CAYE,OAAOP,KAAP,EAAc;IACZR,QAAQ,CAAC;MACLE,IAAI,EAAElB,cADD;MAELuB,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;IAFxB,CAAD,CAAR;EAIH;AACJ,CAnBM,C,CAsBP;;AACA,OAAO,MAAMM,eAAe,GAAIC,EAAD,IAAQ,MAAOjB,QAAP,IAAoB;EACvD,IAAI;IAEAA,QAAQ,CAAC;MAAEE,IAAI,EAAER;IAAR,CAAD,CAAR;IAEA,MAAM;MAAEW;IAAF,IAAW,MAAM3B,KAAK,CAACkC,GAAN,CAAW,iBAAgBK,EAAG,EAA9B,CAAvB;IACAJ,OAAO,CAACC,GAAR,CAAYT,IAAZ,EAAiB,aAAjB;IAEAL,QAAQ,CAAC;MACLE,IAAI,EAAEP,sBADD;MAELY,OAAO,EAAEF,IAAI,CAACN;IAFT,CAAD,CAAR;EAKH,CAZD,CAYE,OAAOS,KAAP,EAAc;IACZR,QAAQ,CAAC;MACLE,IAAI,EAAEN,mBADD;MAELW,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;IAFxB,CAAD,CAAR;EAIH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMQ,SAAS,GAAG,MAAM,MAAOlB,QAAP,IAAoB;EAC/C,IAAI;IAEAA,QAAQ,CAAC;MAAEE,IAAI,EAAEjB;IAAR,CAAD,CAAR;IAEA,MAAM;MAAEoB;IAAF,IAAW,MAAM3B,KAAK,CAACkC,GAAN,CAAW,sBAAX,CAAvB;IACAC,OAAO,CAACC,GAAR,CAAYT,IAAZ,EAAiB,aAAjB;IAEAL,QAAQ,CAAC;MACLE,IAAI,EAAEhB,kBADD;MAELqB,OAAO,EAAEF;IAFJ,CAAD,CAAR;EAKH,CAZD,CAYE,OAAOG,KAAP,EAAc;IACZR,QAAQ,CAAC;MACLE,IAAI,EAAEf,eADD;MAELoB,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;IAFxB,CAAD,CAAR;EAIH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMS,WAAW,GAAG,CAACF,EAAD,EAAIG,SAAJ,KAAkB,MAAOpB,QAAP,IAAoB;EAC7D,IAAI;IACAA,QAAQ,CAAC;MAAEE,IAAI,EAAEd;IAAR,CAAD,CAAR;IAEA,MAAMe,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,gBAAgB;MADX;IADE,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAM3B,KAAK,CAAC2C,GAAN,CAAW,uBAAsBJ,EAAG,EAApC,EAAuCG,SAAvC,EAAkDjB,MAAlD,CAAvB;IAEAH,QAAQ,CAAC;MACLE,IAAI,EAAEb,oBADD;MAELkB,OAAO,EAAEF,IAAI,CAACiB;IAFT,CAAD,CAAR;EAKH,CAhBD,CAgBE,OAAOd,KAAP,EAAc;IACZR,QAAQ,CAAC;MACLE,IAAI,EAAEZ,iBADD;MAELiB,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;IAFxB,CAAD,CAAR;EAMH;AACJ,CAzBM,C,CA2BP;;AACA,OAAO,MAAMa,WAAW,GAAIN,EAAD,IAAQ,MAAOjB,QAAP,IAAoB;EACnD,IAAI;IACAA,QAAQ,CAAC;MAAEE,IAAI,EAAEX;IAAR,CAAD,CAAR;IAIA,MAAM;MAAEc;IAAF,IAAW,MAAM3B,KAAK,CAAC8C,MAAN,CAAc,uBAAsBP,EAAG,EAAvC,CAAvB;IAEAjB,QAAQ,CAAC;MACLE,IAAI,EAAEb,oBADD;MAELkB,OAAO,EAAEF,IAAI,CAACiB;IAFT,CAAD,CAAR;EAKH,CAZD,CAYE,OAAOd,KAAP,EAAc;IACZR,QAAQ,CAAC;MACLE,IAAI,EAAEZ,iBADD;MAELiB,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK;IAFxB,CAAD,CAAR;EAMH;AACJ,CArBM,C,CAyBP;;AAEA,OAAO,MAAMe,WAAW,GAAG,MAAM,MAAOzB,QAAP,IAAoB;EACjDA,QAAQ,CAAC;IACLE,IAAI,EAAEL;EADD,CAAD,CAAR;AAIH,CALM"},"metadata":{},"sourceType":"module"}